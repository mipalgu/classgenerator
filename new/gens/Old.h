/*
 * file Old.h
 *
 * This file was generated by classgenerator from old.txt.
 * DO NOT CHANGE MANUALLY!
 *
 * Created by Callum McColl at %time%, %date%.
 * Copyright Â© %year% Callum McColl. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Callum McColl.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef Old_DEFINED
#define Old_DEFINED

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#include <cstdlib>
#include <string.h>
#include <sstream>
#endif

#include "wb_old.h"

namespace guWhiteboard
{
    /** 
     * This is a test of all of the supported types. 
     */ 
    class Old: public wb_old 
    { 
    public:
        /** Constructor */ 
        Old(string str = "hello", bool b = false, char c = 'c', signed char sc = 'c', unsigned char uc = 'c', int i = 1, signed si = 1, signed int sii = 1, unsigned u = 1, unsigned int ui = 1, uint8_t u8 = 1, uint16_t u16 = 1, uint32_t u32 = 1, uint64_t u64 = 1, int8_t i8 = 1, int16_t i16 = 1, int32_t i32 = 1, int64_t i64 = 1, short s = 1, short int si = 1, signed short ss = 1, signed short int ssi = 1, unsigned short us = 1, unsigned short int usi = 1, long l = 1, long int li = 1, signed long sl = 1, signed long int sli = 1, unsigned long ul = 1, unsigned long int uli = 1, long long ll = 1, long long int lli = 1, signed long long sll = 1, signed long long int slli = 1, unsigned long long ull = 1, unsigned long long int ulli = 1, long64_t l64 = 1, float f = 1.0f, float_t ft = 1.0f, double d = 1.0, double_t dt = 1.0, long double ld = 1.0, double double dd = 1.0, string str = , bool b = false, char c = 0, signed char sc = 0, unsigned char uc = 0, int i = 0, signed si = 0, signed int sii = 0, unsigned u = 0, unsigned int ui = 0, uint8_t u8 = 0, uint16_t u16 = 0, uint32_t u32 = 0, uint64_t u64 = 0, int8_t i8 = 0, int16_t i16 = 0, int32_t i32 = 0, int64_t i64 = 0, short s = 0, short int si = 0, signed short ss = 0, signed short int ssi = 0, unsigned short us = 0, unsigned short int usi = 0, long l = 0, long int li = 0, signed long sl = 0, signed long int sli = 0, unsigned long ul = 0, unsigned long int uli = 0, long long ll = 0, long long int lli = 0, signed long long sll = 0, signed long long int slli = 0, unsigned long long ull = 0, unsigned long long int ulli = 0, long64_t l64 = 0, float f = 0.0f, float_t ft = 0.0f, double d = 0.0, double_t dt = 0.0, long double ld = 0.0, double double dd = 0.0, int * p = NULL, somestruct strct = somestruct())
        { 
            set_str(str); 
            set_b(b); 
            set_c(c); 
            set_sc(sc); 
            set_uc(uc); 
            set_i(i); 
            set_si(si); 
            set_sii(sii); 
            set_u(u); 
            set_ui(ui); 
            set_u8(u8); 
            set_u16(u16); 
            set_u32(u32); 
            set_u64(u64); 
            set_i8(i8); 
            set_i16(i16); 
            set_i32(i32); 
            set_i64(i64); 
            set_s(s); 
            set_si(si); 
            set_ss(ss); 
            set_ssi(ssi); 
            set_us(us); 
            set_usi(usi); 
            set_l(l); 
            set_li(li); 
            set_sl(sl); 
            set_sli(sli); 
            set_ul(ul); 
            set_uli(uli); 
            set_ll(ll); 
            set_lli(lli); 
            set_sll(sll); 
            set_slli(slli); 
            set_ull(ull); 
            set_ulli(ulli); 
            set_l64(l64); 
            set_f(f); 
            set_ft(ft); 
            set_d(d); 
            set_dt(dt); 
            set_ld(ld); 
            set_dd(dd); 
            set_str(str); 
            set_b(b); 
            set_c(c); 
            set_sc(sc); 
            set_uc(uc); 
            set_i(i); 
            set_si(si); 
            set_sii(sii); 
            set_u(u); 
            set_ui(ui); 
            set_u8(u8); 
            set_u16(u16); 
            set_u32(u32); 
            set_u64(u64); 
            set_i8(i8); 
            set_i16(i16); 
            set_i32(i32); 
            set_i64(i64); 
            set_s(s); 
            set_si(si); 
            set_ss(ss); 
            set_ssi(ssi); 
            set_us(us); 
            set_usi(usi); 
            set_l(l); 
            set_li(li); 
            set_sl(sl); 
            set_sli(sli); 
            set_ul(ul); 
            set_uli(uli); 
            set_ll(ll); 
            set_lli(lli); 
            set_sll(sll); 
            set_slli(slli); 
            set_ull(ull); 
            set_ulli(ulli); 
            set_l64(l64); 
            set_f(f); 
            set_ft(ft); 
            set_d(d); 
            set_dt(dt); 
            set_ld(ld); 
            set_dd(dd); 
            set_p(p); 
            set_strct(strct); 
            set_array16(1, 0); 
            set_array16(2, 1); 
            set_array16(3, 2); 
            set_array16(4, 3); 
            set_bools(false, 0); 
            set_bools(false, 1); 
            set_bools(false, 2); 
        } 

        /** Copy Constructor */ 
        Old(const Old &other) : wb_old() 
        { 
            set_str(other.str()); 
            set_b(other.b()); 
            set_c(other.c()); 
            set_sc(other.sc()); 
            set_uc(other.uc()); 
            set_i(other.i()); 
            set_si(other.si()); 
            set_sii(other.sii()); 
            set_u(other.u()); 
            set_ui(other.ui()); 
            set_u8(other.u8()); 
            set_u16(other.u16()); 
            set_u32(other.u32()); 
            set_u64(other.u64()); 
            set_i8(other.i8()); 
            set_i16(other.i16()); 
            set_i32(other.i32()); 
            set_i64(other.i64()); 
            set_s(other.s()); 
            set_si(other.si()); 
            set_ss(other.ss()); 
            set_ssi(other.ssi()); 
            set_us(other.us()); 
            set_usi(other.usi()); 
            set_l(other.l()); 
            set_li(other.li()); 
            set_sl(other.sl()); 
            set_sli(other.sli()); 
            set_ul(other.ul()); 
            set_uli(other.uli()); 
            set_ll(other.ll()); 
            set_lli(other.lli()); 
            set_sll(other.sll()); 
            set_slli(other.slli()); 
            set_ull(other.ull()); 
            set_ulli(other.ulli()); 
            set_l64(other.l64()); 
            set_f(other.f()); 
            set_ft(other.ft()); 
            set_d(other.d()); 
            set_dt(other.dt()); 
            set_ld(other.ld()); 
            set_dd(other.dd()); 
            set_str(other.str()); 
            set_b(other.b()); 
            set_c(other.c()); 
            set_sc(other.sc()); 
            set_uc(other.uc()); 
            set_i(other.i()); 
            set_si(other.si()); 
            set_sii(other.sii()); 
            set_u(other.u()); 
            set_ui(other.ui()); 
            set_u8(other.u8()); 
            set_u16(other.u16()); 
            set_u32(other.u32()); 
            set_u64(other.u64()); 
            set_i8(other.i8()); 
            set_i16(other.i16()); 
            set_i32(other.i32()); 
            set_i64(other.i64()); 
            set_s(other.s()); 
            set_si(other.si()); 
            set_ss(other.ss()); 
            set_ssi(other.ssi()); 
            set_us(other.us()); 
            set_usi(other.usi()); 
            set_l(other.l()); 
            set_li(other.li()); 
            set_sl(other.sl()); 
            set_sli(other.sli()); 
            set_ul(other.ul()); 
            set_uli(other.uli()); 
            set_ll(other.ll()); 
            set_lli(other.lli()); 
            set_sll(other.sll()); 
            set_slli(other.slli()); 
            set_ull(other.ull()); 
            set_ulli(other.ulli()); 
            set_l64(other.l64()); 
            set_f(other.f()); 
            set_ft(other.ft()); 
            set_d(other.d()); 
            set_dt(other.dt()); 
            set_ld(other.ld()); 
            set_dd(other.dd()); 
            set_p(other.p()); 
            set_strct(other.strct()); 
            set_array16(other.array16(0), 0); 
            set_array16(other.array16(1), 1); 
            set_array16(other.array16(2), 2); 
            set_array16(other.array16(3), 3); 
            set_bools(other.bools(0), 0); 
            set_bools(other.bools(1), 1); 
            set_bools(other.bools(2), 2); 
        } 

        /** Copy Assignment Operator */ 
        Old &operator = (const Old &other) 
        { 
            set_str(other.str()); 
            set_b(other.b()); 
            set_c(other.c()); 
            set_sc(other.sc()); 
            set_uc(other.uc()); 
            set_i(other.i()); 
            set_si(other.si()); 
            set_sii(other.sii()); 
            set_u(other.u()); 
            set_ui(other.ui()); 
            set_u8(other.u8()); 
            set_u16(other.u16()); 
            set_u32(other.u32()); 
            set_u64(other.u64()); 
            set_i8(other.i8()); 
            set_i16(other.i16()); 
            set_i32(other.i32()); 
            set_i64(other.i64()); 
            set_s(other.s()); 
            set_si(other.si()); 
            set_ss(other.ss()); 
            set_ssi(other.ssi()); 
            set_us(other.us()); 
            set_usi(other.usi()); 
            set_l(other.l()); 
            set_li(other.li()); 
            set_sl(other.sl()); 
            set_sli(other.sli()); 
            set_ul(other.ul()); 
            set_uli(other.uli()); 
            set_ll(other.ll()); 
            set_lli(other.lli()); 
            set_sll(other.sll()); 
            set_slli(other.slli()); 
            set_ull(other.ull()); 
            set_ulli(other.ulli()); 
            set_l64(other.l64()); 
            set_f(other.f()); 
            set_ft(other.ft()); 
            set_d(other.d()); 
            set_dt(other.dt()); 
            set_ld(other.ld()); 
            set_dd(other.dd()); 
            set_str(other.str()); 
            set_b(other.b()); 
            set_c(other.c()); 
            set_sc(other.sc()); 
            set_uc(other.uc()); 
            set_i(other.i()); 
            set_si(other.si()); 
            set_sii(other.sii()); 
            set_u(other.u()); 
            set_ui(other.ui()); 
            set_u8(other.u8()); 
            set_u16(other.u16()); 
            set_u32(other.u32()); 
            set_u64(other.u64()); 
            set_i8(other.i8()); 
            set_i16(other.i16()); 
            set_i32(other.i32()); 
            set_i64(other.i64()); 
            set_s(other.s()); 
            set_si(other.si()); 
            set_ss(other.ss()); 
            set_ssi(other.ssi()); 
            set_us(other.us()); 
            set_usi(other.usi()); 
            set_l(other.l()); 
            set_li(other.li()); 
            set_sl(other.sl()); 
            set_sli(other.sli()); 
            set_ul(other.ul()); 
            set_uli(other.uli()); 
            set_ll(other.ll()); 
            set_lli(other.lli()); 
            set_sll(other.sll()); 
            set_slli(other.slli()); 
            set_ull(other.ull()); 
            set_ulli(other.ulli()); 
            set_l64(other.l64()); 
            set_f(other.f()); 
            set_ft(other.ft()); 
            set_d(other.d()); 
            set_dt(other.dt()); 
            set_ld(other.ld()); 
            set_dd(other.dd()); 
            set_p(other.p()); 
            set_strct(other.strct()); 
            set_array16(other.array16(0), 0); 
            set_array16(other.array16(1), 1); 
            set_array16(other.array16(2), 2); 
            set_array16(other.array16(3), 3); 
            set_bools(other.bools(0), 0); 
            set_bools(other.bools(1), 1); 
            set_bools(other.bools(2), 2); 
            return *this; 
        } 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
        /** String Constructor */ 
        Old(const std::string &str) { from_string(str.c_str()); }  

        std::string description() 
        { 
#ifdef USE_WB_OLD_C_CONVERSION 
            char buffer[OLD_DESC_BUFFER_SIZE]; 
            wb_old_description(this, buffer, sizeof(buffer)); 
            std::string descr = buffer; 
            return descr; 
#else 
            std::ostringstream ss; 
            ss << "str=" << str(); 
            ss << ", "; 
            ss << "b=" << b(); 
            ss << ", "; 
            ss << "c=" << c(); 
            ss << ", "; 
            ss << "sc=" << sc(); 
            ss << ", "; 
            ss << "uc=" << uc(); 
            ss << ", "; 
            ss << "i=" << i(); 
            ss << ", "; 
            ss << "si=" << si(); 
            ss << ", "; 
            ss << "sii=" << sii(); 
            ss << ", "; 
            ss << "u=" << u(); 
            ss << ", "; 
            ss << "ui=" << ui(); 
            ss << ", "; 
            ss << "u8=" << u8(); 
            ss << ", "; 
            ss << "u16=" << u16(); 
            ss << ", "; 
            ss << "u32=" << u32(); 
            ss << ", "; 
            ss << "u64=" << u64(); 
            ss << ", "; 
            ss << "i8=" << i8(); 
            ss << ", "; 
            ss << "i16=" << i16(); 
            ss << ", "; 
            ss << "i32=" << i32(); 
            ss << ", "; 
            ss << "i64=" << i64(); 
            ss << ", "; 
            ss << "s=" << s(); 
            ss << ", "; 
            ss << "si=" << si(); 
            ss << ", "; 
            ss << "ss=" << ss(); 
            ss << ", "; 
            ss << "ssi=" << ssi(); 
            ss << ", "; 
            ss << "us=" << us(); 
            ss << ", "; 
            ss << "usi=" << usi(); 
            ss << ", "; 
            ss << "l=" << l(); 
            ss << ", "; 
            ss << "li=" << li(); 
            ss << ", "; 
            ss << "sl=" << sl(); 
            ss << ", "; 
            ss << "sli=" << sli(); 
            ss << ", "; 
            ss << "ul=" << ul(); 
            ss << ", "; 
            ss << "uli=" << uli(); 
            ss << ", "; 
            ss << "ll=" << ll(); 
            ss << ", "; 
            ss << "lli=" << lli(); 
            ss << ", "; 
            ss << "sll=" << sll(); 
            ss << ", "; 
            ss << "slli=" << slli(); 
            ss << ", "; 
            ss << "ull=" << ull(); 
            ss << ", "; 
            ss << "ulli=" << ulli(); 
            ss << ", "; 
            ss << "l64=" << l64(); 
            ss << ", "; 
            ss << "f=" << f(); 
            ss << ", "; 
            ss << "ft=" << ft(); 
            ss << ", "; 
            ss << "d=" << d(); 
            ss << ", "; 
            ss << "dt=" << dt(); 
            ss << ", "; 
            ss << "ld=" << ld(); 
            ss << ", "; 
            ss << "dd=" << dd(); 
            ss << ", "; 
            ss << "str=" << str(); 
            ss << ", "; 
            ss << "b=" << b(); 
            ss << ", "; 
            ss << "c=" << c(); 
            ss << ", "; 
            ss << "sc=" << sc(); 
            ss << ", "; 
            ss << "uc=" << uc(); 
            ss << ", "; 
            ss << "i=" << i(); 
            ss << ", "; 
            ss << "si=" << si(); 
            ss << ", "; 
            ss << "sii=" << sii(); 
            ss << ", "; 
            ss << "u=" << u(); 
            ss << ", "; 
            ss << "ui=" << ui(); 
            ss << ", "; 
            ss << "u8=" << u8(); 
            ss << ", "; 
            ss << "u16=" << u16(); 
            ss << ", "; 
            ss << "u32=" << u32(); 
            ss << ", "; 
            ss << "u64=" << u64(); 
            ss << ", "; 
            ss << "i8=" << i8(); 
            ss << ", "; 
            ss << "i16=" << i16(); 
            ss << ", "; 
            ss << "i32=" << i32(); 
            ss << ", "; 
            ss << "i64=" << i64(); 
            ss << ", "; 
            ss << "s=" << s(); 
            ss << ", "; 
            ss << "si=" << si(); 
            ss << ", "; 
            ss << "ss=" << ss(); 
            ss << ", "; 
            ss << "ssi=" << ssi(); 
            ss << ", "; 
            ss << "us=" << us(); 
            ss << ", "; 
            ss << "usi=" << usi(); 
            ss << ", "; 
            ss << "l=" << l(); 
            ss << ", "; 
            ss << "li=" << li(); 
            ss << ", "; 
            ss << "sl=" << sl(); 
            ss << ", "; 
            ss << "sli=" << sli(); 
            ss << ", "; 
            ss << "ul=" << ul(); 
            ss << ", "; 
            ss << "uli=" << uli(); 
            ss << ", "; 
            ss << "ll=" << ll(); 
            ss << ", "; 
            ss << "lli=" << lli(); 
            ss << ", "; 
            ss << "sll=" << sll(); 
            ss << ", "; 
            ss << "slli=" << slli(); 
            ss << ", "; 
            ss << "ull=" << ull(); 
            ss << ", "; 
            ss << "ulli=" << ulli(); 
            ss << ", "; 
            ss << "l64=" << l64(); 
            ss << ", "; 
            ss << "f=" << f(); 
            ss << ", "; 
            ss << "ft=" << ft(); 
            ss << ", "; 
            ss << "d=" << d(); 
            ss << ", "; 
            ss << "dt=" << dt(); 
            ss << ", "; 
            ss << "ld=" << ld(); 
            ss << ", "; 
            ss << "dd=" << dd(); 
            ss << ", "; 
            ss << "p=" << p(); 
            ss << ", "; 
            ss << "strct=" << strct(); 
            ss << ", "; 

            bool array16_first = true; 
            ss << "array16={"; 
            for (int i = 0; i < OLD_ARRAY16_ARRAY_SIZE; i++) 
            { 
                ss << (array16_first ? "" : ",") << array16(i); 
                array16_first = false;  
            } 
            ss << "}"; 
            ss << ", "; 

            bool bools_first = true; 
            ss << "bools={"; 
            for (int i = 0; i < OLD_BOOLS_ARRAY_SIZE; i++) 
            { 
                ss << (bools_first ? "" : ",") << bools(i); 
                bools_first = false;  
            } 
            ss << "}"; 

            return ss.str(); 

#endif /// USE_WB_OLD_C_CONVERSION
        } 

        std::string to_string() 
        { 
#ifdef USE_WB_OLD_C_CONVERSION 
            char buffer[OLD_DESC_BUFFER_SIZE]; 
            wb_old_to_string(this, buffer, sizeof(buffer)); 
            std::string toString = buffer; 
            return toString; 
#else 
            std::ostringstream ss; 
            ss << str(); 
            ss << ", "; 
            ss << b(); 
            ss << ", "; 
            ss << c(); 
            ss << ", "; 
            ss << sc(); 
            ss << ", "; 
            ss << uc(); 
            ss << ", "; 
            ss << i(); 
            ss << ", "; 
            ss << si(); 
            ss << ", "; 
            ss << sii(); 
            ss << ", "; 
            ss << u(); 
            ss << ", "; 
            ss << ui(); 
            ss << ", "; 
            ss << u8(); 
            ss << ", "; 
            ss << u16(); 
            ss << ", "; 
            ss << u32(); 
            ss << ", "; 
            ss << u64(); 
            ss << ", "; 
            ss << i8(); 
            ss << ", "; 
            ss << i16(); 
            ss << ", "; 
            ss << i32(); 
            ss << ", "; 
            ss << i64(); 
            ss << ", "; 
            ss << s(); 
            ss << ", "; 
            ss << si(); 
            ss << ", "; 
            ss << ss(); 
            ss << ", "; 
            ss << ssi(); 
            ss << ", "; 
            ss << us(); 
            ss << ", "; 
            ss << usi(); 
            ss << ", "; 
            ss << l(); 
            ss << ", "; 
            ss << li(); 
            ss << ", "; 
            ss << sl(); 
            ss << ", "; 
            ss << sli(); 
            ss << ", "; 
            ss << ul(); 
            ss << ", "; 
            ss << uli(); 
            ss << ", "; 
            ss << ll(); 
            ss << ", "; 
            ss << lli(); 
            ss << ", "; 
            ss << sll(); 
            ss << ", "; 
            ss << slli(); 
            ss << ", "; 
            ss << ull(); 
            ss << ", "; 
            ss << ulli(); 
            ss << ", "; 
            ss << l64(); 
            ss << ", "; 
            ss << f(); 
            ss << ", "; 
            ss << ft(); 
            ss << ", "; 
            ss << d(); 
            ss << ", "; 
            ss << dt(); 
            ss << ", "; 
            ss << ld(); 
            ss << ", "; 
            ss << dd(); 
            ss << ", "; 
            ss << str(); 
            ss << ", "; 
            ss << b(); 
            ss << ", "; 
            ss << c(); 
            ss << ", "; 
            ss << sc(); 
            ss << ", "; 
            ss << uc(); 
            ss << ", "; 
            ss << i(); 
            ss << ", "; 
            ss << si(); 
            ss << ", "; 
            ss << sii(); 
            ss << ", "; 
            ss << u(); 
            ss << ", "; 
            ss << ui(); 
            ss << ", "; 
            ss << u8(); 
            ss << ", "; 
            ss << u16(); 
            ss << ", "; 
            ss << u32(); 
            ss << ", "; 
            ss << u64(); 
            ss << ", "; 
            ss << i8(); 
            ss << ", "; 
            ss << i16(); 
            ss << ", "; 
            ss << i32(); 
            ss << ", "; 
            ss << i64(); 
            ss << ", "; 
            ss << s(); 
            ss << ", "; 
            ss << si(); 
            ss << ", "; 
            ss << ss(); 
            ss << ", "; 
            ss << ssi(); 
            ss << ", "; 
            ss << us(); 
            ss << ", "; 
            ss << usi(); 
            ss << ", "; 
            ss << l(); 
            ss << ", "; 
            ss << li(); 
            ss << ", "; 
            ss << sl(); 
            ss << ", "; 
            ss << sli(); 
            ss << ", "; 
            ss << ul(); 
            ss << ", "; 
            ss << uli(); 
            ss << ", "; 
            ss << ll(); 
            ss << ", "; 
            ss << lli(); 
            ss << ", "; 
            ss << sll(); 
            ss << ", "; 
            ss << slli(); 
            ss << ", "; 
            ss << ull(); 
            ss << ", "; 
            ss << ulli(); 
            ss << ", "; 
            ss << l64(); 
            ss << ", "; 
            ss << f(); 
            ss << ", "; 
            ss << ft(); 
            ss << ", "; 
            ss << d(); 
            ss << ", "; 
            ss << dt(); 
            ss << ", "; 
            ss << ld(); 
            ss << ", "; 
            ss << dd(); 
            ss << ", "; 
            ss << p(); 
            ss << ", "; 
            ss << strct(); 
            ss << ", "; 

            bool array16_first = true; 
            ss << "{"; 
            for (int i = 0; i < OLD_ARRAY16_ARRAY_SIZE; i++) 
            { 
                ss << (array16_first ? "" : ",") << array16(i); 
                array16_first = false;  
            } 
            ss << "}"; 
            ss << ", "; 

            bool bools_first = true; 
            ss << "{"; 
            for (int i = 0; i < OLD_BOOLS_ARRAY_SIZE; i++) 
            { 
                ss << (bools_first ? "" : ",") << bools(i); 
                bools_first = false;  
            } 
            ss << "}"; 

            return ss.str(); 

#endif /// USE_WB_OLD_C_CONVERSION
        } 

        void from_string(const std::string &str) 
        { 
#ifdef USE_WB_OLD_C_CONVERSION 
            wb_old_from_string(this, str); 
#else 
            char var[100]; 
            unsigned long str_index = str.find("str");
            if(str_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(str_index, str.length()).c_str(), "str = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_str(string((value.c_str()))); 
                } 
            } 

            unsigned long b_index = str.find("b");
            if(b_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(b_index, str.length()).c_str(), "b = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_b(value.compare("true") == 0  || value.compare("1") == 0 ? true : false); 
                } 
            } 

            unsigned long c_index = str.find("c");
            if(c_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(c_index, str.length()).c_str(), "c = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_c(char(atoi(value.c_str()))); 
                } 
            } 

            unsigned long sc_index = str.find("sc");
            if(sc_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(sc_index, str.length()).c_str(), "sc = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_sc(signed char(atoi(value.c_str()))); 
                } 
            } 

            unsigned long uc_index = str.find("uc");
            if(uc_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(uc_index, str.length()).c_str(), "uc = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_uc(unsigned char(atoi(value.c_str()))); 
                } 
            } 

            unsigned long i_index = str.find("i");
            if(i_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(i_index, str.length()).c_str(), "i = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_i(int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long si_index = str.find("si");
            if(si_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(si_index, str.length()).c_str(), "si = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_si(signed(atoi(value.c_str()))); 
                } 
            } 

            unsigned long sii_index = str.find("sii");
            if(sii_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(sii_index, str.length()).c_str(), "sii = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_sii(signed int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long u_index = str.find("u");
            if(u_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(u_index, str.length()).c_str(), "u = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_u(unsigned(atoi(value.c_str()))); 
                } 
            } 

            unsigned long ui_index = str.find("ui");
            if(ui_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ui_index, str.length()).c_str(), "ui = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ui(unsigned int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long u8_index = str.find("u8");
            if(u8_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(u8_index, str.length()).c_str(), "u8 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_u8(uint8_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long u16_index = str.find("u16");
            if(u16_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(u16_index, str.length()).c_str(), "u16 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_u16(uint16_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long u32_index = str.find("u32");
            if(u32_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(u32_index, str.length()).c_str(), "u32 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_u32(uint32_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long u64_index = str.find("u64");
            if(u64_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(u64_index, str.length()).c_str(), "u64 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_u64(uint64_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long i8_index = str.find("i8");
            if(i8_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(i8_index, str.length()).c_str(), "i8 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_i8(int8_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long i16_index = str.find("i16");
            if(i16_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(i16_index, str.length()).c_str(), "i16 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_i16(int16_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long i32_index = str.find("i32");
            if(i32_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(i32_index, str.length()).c_str(), "i32 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_i32(int32_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long i64_index = str.find("i64");
            if(i64_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(i64_index, str.length()).c_str(), "i64 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_i64(int64_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long s_index = str.find("s");
            if(s_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(s_index, str.length()).c_str(), "s = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_s(short(atoi(value.c_str()))); 
                } 
            } 

            unsigned long si_index = str.find("si");
            if(si_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(si_index, str.length()).c_str(), "si = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_si(short int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long ss_index = str.find("ss");
            if(ss_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ss_index, str.length()).c_str(), "ss = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ss(signed short(atoi(value.c_str()))); 
                } 
            } 

            unsigned long ssi_index = str.find("ssi");
            if(ssi_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ssi_index, str.length()).c_str(), "ssi = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ssi(signed short int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long us_index = str.find("us");
            if(us_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(us_index, str.length()).c_str(), "us = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_us(unsigned short(atoi(value.c_str()))); 
                } 
            } 

            unsigned long usi_index = str.find("usi");
            if(usi_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(usi_index, str.length()).c_str(), "usi = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_usi(unsigned short int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long l_index = str.find("l");
            if(l_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(l_index, str.length()).c_str(), "l = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_l(long(atol(value.c_str()))); 
                } 
            } 

            unsigned long li_index = str.find("li");
            if(li_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(li_index, str.length()).c_str(), "li = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_li(long int(atol(value.c_str()))); 
                } 
            } 

            unsigned long sl_index = str.find("sl");
            if(sl_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(sl_index, str.length()).c_str(), "sl = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_sl(signed long(atol(value.c_str()))); 
                } 
            } 

            unsigned long sli_index = str.find("sli");
            if(sli_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(sli_index, str.length()).c_str(), "sli = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_sli(signed long int(atol(value.c_str()))); 
                } 
            } 

            unsigned long ul_index = str.find("ul");
            if(ul_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ul_index, str.length()).c_str(), "ul = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ul(unsigned long(atol(value.c_str()))); 
                } 
            } 

            unsigned long uli_index = str.find("uli");
            if(uli_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(uli_index, str.length()).c_str(), "uli = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_uli(unsigned long int(atol(value.c_str()))); 
                } 
            } 

            unsigned long ll_index = str.find("ll");
            if(ll_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ll_index, str.length()).c_str(), "ll = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ll(long long(atoll(value.c_str()))); 
                } 
            } 

            unsigned long lli_index = str.find("lli");
            if(lli_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(lli_index, str.length()).c_str(), "lli = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_lli(long long int(atoll(value.c_str()))); 
                } 
            } 

            unsigned long sll_index = str.find("sll");
            if(sll_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(sll_index, str.length()).c_str(), "sll = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_sll(signed long long(atoll(value.c_str()))); 
                } 
            } 

            unsigned long slli_index = str.find("slli");
            if(slli_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(slli_index, str.length()).c_str(), "slli = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_slli(signed long long int(atoll(value.c_str()))); 
                } 
            } 

            unsigned long ull_index = str.find("ull");
            if(ull_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ull_index, str.length()).c_str(), "ull = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ull(unsigned long long(atoll(value.c_str()))); 
                } 
            } 

            unsigned long ulli_index = str.find("ulli");
            if(ulli_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ulli_index, str.length()).c_str(), "ulli = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ulli(unsigned long long int(atoll(value.c_str()))); 
                } 
            } 

            unsigned long l64_index = str.find("l64");
            if(l64_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(l64_index, str.length()).c_str(), "l64 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_l64(long64_t(atoll(value.c_str()))); 
                } 
            } 

            unsigned long f_index = str.find("f");
            if(f_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(f_index, str.length()).c_str(), "f = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_f(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long ft_index = str.find("ft");
            if(ft_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ft_index, str.length()).c_str(), "ft = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ft(float_t(atof(value.c_str()))); 
                } 
            } 

            unsigned long d_index = str.find("d");
            if(d_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(d_index, str.length()).c_str(), "d = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_d(double(atof(value.c_str()))); 
                } 
            } 

            unsigned long dt_index = str.find("dt");
            if(dt_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(dt_index, str.length()).c_str(), "dt = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_dt(double_t(atof(value.c_str()))); 
                } 
            } 

            unsigned long ld_index = str.find("ld");
            if(ld_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ld_index, str.length()).c_str(), "ld = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ld(long double(atof(value.c_str()))); 
                } 
            } 

            unsigned long dd_index = str.find("dd");
            if(dd_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(dd_index, str.length()).c_str(), "dd = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_dd(double double(atof(value.c_str()))); 
                } 
            } 

            unsigned long str_index = str.find("str");
            if(str_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(str_index, str.length()).c_str(), "str = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_str(string((value.c_str()))); 
                } 
            } 

            unsigned long b_index = str.find("b");
            if(b_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(b_index, str.length()).c_str(), "b = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_b(value.compare("true") == 0  || value.compare("1") == 0 ? true : false); 
                } 
            } 

            unsigned long c_index = str.find("c");
            if(c_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(c_index, str.length()).c_str(), "c = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_c(char(atoi(value.c_str()))); 
                } 
            } 

            unsigned long sc_index = str.find("sc");
            if(sc_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(sc_index, str.length()).c_str(), "sc = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_sc(signed char(atoi(value.c_str()))); 
                } 
            } 

            unsigned long uc_index = str.find("uc");
            if(uc_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(uc_index, str.length()).c_str(), "uc = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_uc(unsigned char(atoi(value.c_str()))); 
                } 
            } 

            unsigned long i_index = str.find("i");
            if(i_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(i_index, str.length()).c_str(), "i = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_i(int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long si_index = str.find("si");
            if(si_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(si_index, str.length()).c_str(), "si = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_si(signed(atoi(value.c_str()))); 
                } 
            } 

            unsigned long sii_index = str.find("sii");
            if(sii_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(sii_index, str.length()).c_str(), "sii = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_sii(signed int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long u_index = str.find("u");
            if(u_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(u_index, str.length()).c_str(), "u = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_u(unsigned(atoi(value.c_str()))); 
                } 
            } 

            unsigned long ui_index = str.find("ui");
            if(ui_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ui_index, str.length()).c_str(), "ui = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ui(unsigned int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long u8_index = str.find("u8");
            if(u8_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(u8_index, str.length()).c_str(), "u8 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_u8(uint8_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long u16_index = str.find("u16");
            if(u16_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(u16_index, str.length()).c_str(), "u16 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_u16(uint16_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long u32_index = str.find("u32");
            if(u32_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(u32_index, str.length()).c_str(), "u32 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_u32(uint32_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long u64_index = str.find("u64");
            if(u64_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(u64_index, str.length()).c_str(), "u64 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_u64(uint64_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long i8_index = str.find("i8");
            if(i8_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(i8_index, str.length()).c_str(), "i8 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_i8(int8_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long i16_index = str.find("i16");
            if(i16_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(i16_index, str.length()).c_str(), "i16 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_i16(int16_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long i32_index = str.find("i32");
            if(i32_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(i32_index, str.length()).c_str(), "i32 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_i32(int32_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long i64_index = str.find("i64");
            if(i64_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(i64_index, str.length()).c_str(), "i64 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_i64(int64_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long s_index = str.find("s");
            if(s_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(s_index, str.length()).c_str(), "s = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_s(short(atoi(value.c_str()))); 
                } 
            } 

            unsigned long si_index = str.find("si");
            if(si_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(si_index, str.length()).c_str(), "si = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_si(short int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long ss_index = str.find("ss");
            if(ss_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ss_index, str.length()).c_str(), "ss = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ss(signed short(atoi(value.c_str()))); 
                } 
            } 

            unsigned long ssi_index = str.find("ssi");
            if(ssi_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ssi_index, str.length()).c_str(), "ssi = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ssi(signed short int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long us_index = str.find("us");
            if(us_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(us_index, str.length()).c_str(), "us = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_us(unsigned short(atoi(value.c_str()))); 
                } 
            } 

            unsigned long usi_index = str.find("usi");
            if(usi_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(usi_index, str.length()).c_str(), "usi = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_usi(unsigned short int(atoi(value.c_str()))); 
                } 
            } 

            unsigned long l_index = str.find("l");
            if(l_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(l_index, str.length()).c_str(), "l = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_l(long(atol(value.c_str()))); 
                } 
            } 

            unsigned long li_index = str.find("li");
            if(li_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(li_index, str.length()).c_str(), "li = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_li(long int(atol(value.c_str()))); 
                } 
            } 

            unsigned long sl_index = str.find("sl");
            if(sl_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(sl_index, str.length()).c_str(), "sl = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_sl(signed long(atol(value.c_str()))); 
                } 
            } 

            unsigned long sli_index = str.find("sli");
            if(sli_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(sli_index, str.length()).c_str(), "sli = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_sli(signed long int(atol(value.c_str()))); 
                } 
            } 

            unsigned long ul_index = str.find("ul");
            if(ul_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ul_index, str.length()).c_str(), "ul = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ul(unsigned long(atol(value.c_str()))); 
                } 
            } 

            unsigned long uli_index = str.find("uli");
            if(uli_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(uli_index, str.length()).c_str(), "uli = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_uli(unsigned long int(atol(value.c_str()))); 
                } 
            } 

            unsigned long ll_index = str.find("ll");
            if(ll_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ll_index, str.length()).c_str(), "ll = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ll(long long(atoll(value.c_str()))); 
                } 
            } 

            unsigned long lli_index = str.find("lli");
            if(lli_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(lli_index, str.length()).c_str(), "lli = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_lli(long long int(atoll(value.c_str()))); 
                } 
            } 

            unsigned long sll_index = str.find("sll");
            if(sll_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(sll_index, str.length()).c_str(), "sll = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_sll(signed long long(atoll(value.c_str()))); 
                } 
            } 

            unsigned long slli_index = str.find("slli");
            if(slli_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(slli_index, str.length()).c_str(), "slli = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_slli(signed long long int(atoll(value.c_str()))); 
                } 
            } 

            unsigned long ull_index = str.find("ull");
            if(ull_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ull_index, str.length()).c_str(), "ull = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ull(unsigned long long(atoll(value.c_str()))); 
                } 
            } 

            unsigned long ulli_index = str.find("ulli");
            if(ulli_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ulli_index, str.length()).c_str(), "ulli = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ulli(unsigned long long int(atoll(value.c_str()))); 
                } 
            } 

            unsigned long l64_index = str.find("l64");
            if(l64_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(l64_index, str.length()).c_str(), "l64 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_l64(long64_t(atoll(value.c_str()))); 
                } 
            } 

            unsigned long f_index = str.find("f");
            if(f_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(f_index, str.length()).c_str(), "f = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_f(float(atof(value.c_str()))); 
                } 
            } 

            unsigned long ft_index = str.find("ft");
            if(ft_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ft_index, str.length()).c_str(), "ft = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ft(float_t(atof(value.c_str()))); 
                } 
            } 

            unsigned long d_index = str.find("d");
            if(d_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(d_index, str.length()).c_str(), "d = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_d(double(atof(value.c_str()))); 
                } 
            } 

            unsigned long dt_index = str.find("dt");
            if(dt_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(dt_index, str.length()).c_str(), "dt = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_dt(double_t(atof(value.c_str()))); 
                } 
            } 

            unsigned long ld_index = str.find("ld");
            if(ld_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(ld_index, str.length()).c_str(), "ld = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_ld(long double(atof(value.c_str()))); 
                } 
            } 

            unsigned long dd_index = str.find("dd");
            if(dd_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(dd_index, str.length()).c_str(), "dd = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_dd(double double(atof(value.c_str()))); 
                } 
            } 

            unsigned long p_index = str.find("p");
            if(p_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(p_index, str.length()).c_str(), "p = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                } 
            } 

            unsigned long strct_index = str.find("strct");
            if(strct_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(strct_index, str.length()).c_str(), "strct = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                } 
            } 

            unsigned long array16_index = str.find("array16");
            if(array16_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(array16_index, str.length()).c_str(), "array16 = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_array16(int16_t(atoi(value.c_str()))); 
                } 
            } 

            unsigned long bools_index = str.find("bools");
            if(bools_index != std::string::npos)
            {
                memset(&var[0], 0, sizeof(var));
                if(sscanf(str.substr(bools_index, str.length()).c_str(), "bools = %[^,]", var) == 1)
                {
                    std::string value = std::string(var);
                    set_bools(value.compare("true") == 0  || value.compare("1") == 0 ? true : false); 
                } 
            } 

#endif /// USE_WB_OLD_C_CONVERSION
        } 
#endif ///   WHITEBOARD_POSTER_STRING_CONVERSION
    }; 
} /// namespace guWhiteboard 
#endif /// Old_DEFINED 
