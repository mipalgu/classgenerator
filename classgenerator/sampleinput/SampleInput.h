/** 
 * file SampleInput.h 
 * 
 * This file was generated by classgenerator from sample_input.txt. 
 * DO NOT CHANGE MANUALLY! 
 * 
 * Created by Mick Hawkins on 17:41, 30/10/2015 
 * Copyright (c) 2015 Mick Hawkins 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 
 * 2. Redistributions in binary form must reproduce the above 
 *    copyright notice, this list of conditions and the following 
 *    disclaimer in the documentation and/or other materials 
 *    provided with the distribution. 
 * 
 * 3. All advertising materials mentioning features or use of this 
 *    software must display the following acknowledgement: 
 * 
 *    This product includes software developed by Mick Hawkins. 
 * 
 * 4. Neither the name of the author nor the names of contributors 
 *    may be used to endorse or promote products derived from this 
 *    software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * ----------------------------------------------------------------------- 
 * This program is free software; you can redistribute it and/or 
 * modify it under the above terms or under the terms of the GNU 
 * General Public License as published by the Free Software Foundation; 
 * either version 2 of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, see http://www.gnu.org/licenses/ 
 * or write to the Free Software Foundation, Inc., 51 Franklin Street, 
 * Fifth Floor, Boston, MA  02110-1301, USA. 
 */ 


#ifndef SampleInput_DEFINED 
#define SampleInput_DEFINED 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
#include <cstdlib> 
#include <string.h> 
#include <sstream> 
#endif 

#include "wb_sample_input.h" 

namespace guWhiteboard 
{
    /** 
     * This sample class contains two variables. 
     * A boolean and an array of integers. 
     */ 
    class SampleInput: public wb_sample_input 
    { 

        /** Default constructor */ 
        SampleInput() : _pressed(true), _point2D()
        { 
            _point2D = {10, 11}; 
        } 

        /** Copy Constructor */ 
        SampleInput(const wb_sample_input &other) : 
            _pressed(other._pressed)
        { 
            memcpy(point2D, &other, sizeof(wb_sample_input)); 
        } 

        /** Assignment Operator */ 
        SampleInput &operator = (const wb_sample_input &other) 
        { 
            _pressed = other._pressed; 
            memcpy(point2D, &other, sizeof(wb_sample_input)); 
            return *this; 
        } 

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION 
        std::string description() 
        { 
#ifdef USE_WB_SAMPLE_INPUT_C_CONVERSION 
            char buffer[SAMPLE_INPUT_DESC_BUFFER_SIZE]; 
            wb_sample_input_description (this, buffer, sizeof(buffer)); 
            std::string descr = buffer; 
            return descr; 
#else 
            std::string description() const 
            { 
                std::ostringstream ss; 
                ss << "pressed=" << pressed; 
                ss << ", "; 

                bool point2D_first = true; 
                ss << "point2D="; 
                for (size_t i = 0; i < SAMPLE_INPUT_POINT2D_ARRAY_SIZE-1; i++) 
                { 
                    ss << (point2D_first ? "" : ",") << point2D[i]; 
                    point2D_first = false;  
                } 

                return ss.str(); 
            } 
#endif /// USE_WB_SAMPLE_INPUT_C_CONVERSION
        } 
#endif ///   WHITEBOARD_POSTER_STRING_CONVERSION
    }; 
} /// namespace guWhiteboard 
