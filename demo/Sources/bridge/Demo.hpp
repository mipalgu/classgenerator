/*
 * file Demo.hpp
 *
 * This file was generated by classgenerator from demo.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2021 Callum McColl. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Callum McColl.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef guWhiteboard_Demo_h
#define guWhiteboard_Demo_h

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#include <cstdlib>
#include <string.h>
#include <sstream>
#endif

#include <gu_util.h>
#include "wb_demo.h"
#include <float.h>

#undef guWhiteboard_Demo_DEFINED
#define guWhiteboard_Demo_DEFINED

#undef Demo_DEFINED
#define Demo_DEFINED

#include "Sub.hpp"

namespace guWhiteboard {

    /**
     * Provides a C++ wrapper around `wb_demo`.
     */
    class Demo: public wb_demo {

    private:

        /**
         * Set the members of the class.
         */
        void init(std::string t_str = "hello", bool t_b = false, char t_c = 'c', signed char t_sc = 'c', unsigned char t_uc = 'c', int t_i = 1, signed t_si = 1, signed int t_sii = 1, unsigned t_u = 1, unsigned int t_ui = 1, uint8_t t_u8 = 1, uint16_t t_u16 = 1, uint32_t t_u32 = 1, uint64_t t_u64 = 1, int8_t t_i8 = 1, int16_t t_i16 = 1, int32_t t_i32 = 1, int64_t t_i64 = 1, short t_s = 1, short int t_si_2 = 1, signed short t_ss = 1, signed short int t_ssi = 1, unsigned short t_us = 1, unsigned short int t_usi = 1, long t_l = 1, long int t_li = 1, signed long t_sl = 1, signed long int t_sli = 1, unsigned long t_ul = 1, unsigned long int t_uli = 1, long long t_ll = 1, long long int t_lli = 1, signed long long t_sll = 1, signed long long int t_slli = 1, unsigned long long t_ull = 1, unsigned long long int t_ulli = 1, float t_f = 1.0f, float_t t_ft = 1.0f, double t_d = 1.0, double_t t_dt = 1.0, std::string t_str2 = "", bool t_b2 = true, char t_c2 = 0, signed char t_sc2 = 0, unsigned char t_uc2 = 0, int t_i2 = 0, signed t_si2 = 0, signed int t_sii2 = 0, unsigned t_u2 = 0, unsigned int t_ui2 = 0, uint8_t t_u82 = 0, uint16_t t_u162 = 0, uint32_t t_u322 = 0, uint64_t t_u642 = 0, int8_t t_i82 = 0, int16_t t_i162 = 0, int32_t t_i322 = 0, int64_t t_i642 = 0, short t_s2 = 0, short int t_si_22 = 0, signed short t_ss2 = 0, signed short int t_ssi2 = 0, unsigned short t_us2 = 0, unsigned short int t_usi2 = 0, long t_l2 = 0, long int t_li2 = 0, signed long t_sl2 = 0, signed long int t_sli2 = 0, unsigned long t_ul2 = 0, unsigned long int t_uli2 = 0, long long t_ll2 = 0, long long int t_lli2 = 0, signed long long t_sll2 = 0, signed long long int t_slli2 = 0, unsigned long long t_ull2 = 0, unsigned long long int t_ulli2 = 0, float t_f2 = 0.0f, float_t t_ft2 = 0.0f, double t_d2 = 0.0, double_t t_dt2 = 0.0, struct somestruct t_strct = somestruct(), const int16_t t_array16[4] = NULLPTR, const bool t_bools[3] = NULLPTR, unsigned int t_myBit = 0, unsigned int t_myBit2 = 1, struct wb_sub t_sub1 = wb_sub(), struct wb_sub t_sub2 = wb_sub(), const struct wb_sub t_subs[3] = NULLPTR, enum Resolutions t_cameraResolution = static_cast<enum Resolutions>(0), enum Resolutions t_cameraResolution2 = VGA) {
            gu_strlcpy(const_cast<char *>(this->str()), t_str.c_str(), 6);
            set_b(t_b);
            set_c(t_c);
            set_sc(t_sc);
            set_uc(t_uc);
            set_i(t_i);
            set_si(t_si);
            set_sii(t_sii);
            set_u(t_u);
            set_ui(t_ui);
            set_u8(t_u8);
            set_u16(t_u16);
            set_u32(t_u32);
            set_u64(t_u64);
            set_i8(t_i8);
            set_i16(t_i16);
            set_i32(t_i32);
            set_i64(t_i64);
            set_s(t_s);
            set_si_2(t_si_2);
            set_ss(t_ss);
            set_ssi(t_ssi);
            set_us(t_us);
            set_usi(t_usi);
            set_l(t_l);
            set_li(t_li);
            set_sl(t_sl);
            set_sli(t_sli);
            set_ul(t_ul);
            set_uli(t_uli);
            set_ll(t_ll);
            set_lli(t_lli);
            set_sll(t_sll);
            set_slli(t_slli);
            set_ull(t_ull);
            set_ulli(t_ulli);
            set_f(t_f);
            set_ft(t_ft);
            set_d(t_d);
            set_dt(t_dt);
            gu_strlcpy(const_cast<char *>(this->str2()), t_str2.c_str(), 6);
            set_b2(t_b2);
            set_c2(t_c2);
            set_sc2(t_sc2);
            set_uc2(t_uc2);
            set_i2(t_i2);
            set_si2(t_si2);
            set_sii2(t_sii2);
            set_u2(t_u2);
            set_ui2(t_ui2);
            set_u82(t_u82);
            set_u162(t_u162);
            set_u322(t_u322);
            set_u642(t_u642);
            set_i82(t_i82);
            set_i162(t_i162);
            set_i322(t_i322);
            set_i642(t_i642);
            set_s2(t_s2);
            set_si_22(t_si_22);
            set_ss2(t_ss2);
            set_ssi2(t_ssi2);
            set_us2(t_us2);
            set_usi2(t_usi2);
            set_l2(t_l2);
            set_li2(t_li2);
            set_sl2(t_sl2);
            set_sli2(t_sli2);
            set_ul2(t_ul2);
            set_uli2(t_uli2);
            set_ll2(t_ll2);
            set_lli2(t_lli2);
            set_sll2(t_sll2);
            set_slli2(t_slli2);
            set_ull2(t_ull2);
            set_ulli2(t_ulli2);
            set_f2(t_f2);
            set_ft2(t_ft2);
            set_d2(t_d2);
            set_dt2(t_dt2);
            set_strct(t_strct);
            if (t_array16 != NULLPTR) {
                std::memcpy(wb_demo::array16, t_array16, DEMO_ARRAY16_ARRAY_SIZE * sizeof (int16_t));
            } else {
                int16_t array16_temp[DEMO_ARRAY16_ARRAY_SIZE] = {1,2,3,4};
                std::memcpy(wb_demo::array16, array16_temp, DEMO_ARRAY16_ARRAY_SIZE * sizeof (int16_t));
            }
            if (t_bools != NULLPTR) {
                std::memcpy(wb_demo::bools, t_bools, DEMO_BOOLS_ARRAY_SIZE * sizeof (bool));
            } else {
                bool bools_temp[DEMO_BOOLS_ARRAY_SIZE] = {true, true, true};
                std::memcpy(wb_demo::bools, bools_temp, DEMO_BOOLS_ARRAY_SIZE * sizeof (bool));
            }
            set_myBit(t_myBit);
            set_myBit2(t_myBit2);
            set_sub1(t_sub1);
            set_sub2(t_sub2);
            if (t_subs != NULLPTR) {
                std::memcpy(wb_demo::subs, t_subs, DEMO_SUBS_ARRAY_SIZE * sizeof (struct wb_sub));
            } else {
                struct wb_sub subs_temp[DEMO_SUBS_ARRAY_SIZE] = {wb_sub(), wb_sub(), wb_sub()};
                std::memcpy(wb_demo::subs, subs_temp, DEMO_SUBS_ARRAY_SIZE * sizeof (struct wb_sub));
            }
            set_cameraResolution(t_cameraResolution);
            set_cameraResolution2(t_cameraResolution2);
        }

    public:

        /**
         * Create a new `Demo`.
         */
        Demo(std::string t_str = "hello", bool t_b = false, char t_c = 'c', signed char t_sc = 'c', unsigned char t_uc = 'c', int t_i = 1, signed t_si = 1, signed int t_sii = 1, unsigned t_u = 1, unsigned int t_ui = 1, uint8_t t_u8 = 1, uint16_t t_u16 = 1, uint32_t t_u32 = 1, uint64_t t_u64 = 1, int8_t t_i8 = 1, int16_t t_i16 = 1, int32_t t_i32 = 1, int64_t t_i64 = 1, short t_s = 1, short int t_si_2 = 1, signed short t_ss = 1, signed short int t_ssi = 1, unsigned short t_us = 1, unsigned short int t_usi = 1, long t_l = 1, long int t_li = 1, signed long t_sl = 1, signed long int t_sli = 1, unsigned long t_ul = 1, unsigned long int t_uli = 1, long long t_ll = 1, long long int t_lli = 1, signed long long t_sll = 1, signed long long int t_slli = 1, unsigned long long t_ull = 1, unsigned long long int t_ulli = 1, float t_f = 1.0f, float_t t_ft = 1.0f, double t_d = 1.0, double_t t_dt = 1.0, std::string t_str2 = "", bool t_b2 = true, char t_c2 = 0, signed char t_sc2 = 0, unsigned char t_uc2 = 0, int t_i2 = 0, signed t_si2 = 0, signed int t_sii2 = 0, unsigned t_u2 = 0, unsigned int t_ui2 = 0, uint8_t t_u82 = 0, uint16_t t_u162 = 0, uint32_t t_u322 = 0, uint64_t t_u642 = 0, int8_t t_i82 = 0, int16_t t_i162 = 0, int32_t t_i322 = 0, int64_t t_i642 = 0, short t_s2 = 0, short int t_si_22 = 0, signed short t_ss2 = 0, signed short int t_ssi2 = 0, unsigned short t_us2 = 0, unsigned short int t_usi2 = 0, long t_l2 = 0, long int t_li2 = 0, signed long t_sl2 = 0, signed long int t_sli2 = 0, unsigned long t_ul2 = 0, unsigned long int t_uli2 = 0, long long t_ll2 = 0, long long int t_lli2 = 0, signed long long t_sll2 = 0, signed long long int t_slli2 = 0, unsigned long long t_ull2 = 0, unsigned long long int t_ulli2 = 0, float t_f2 = 0.0f, float_t t_ft2 = 0.0f, double t_d2 = 0.0, double_t t_dt2 = 0.0, struct somestruct t_strct = somestruct(), const int16_t t_array16[4] = NULLPTR, const bool t_bools[3] = NULLPTR, unsigned int t_myBit = 0, unsigned int t_myBit2 = 1, struct wb_sub t_sub1 = wb_sub(), struct wb_sub t_sub2 = wb_sub(), const struct wb_sub t_subs[3] = NULLPTR, enum Resolutions t_cameraResolution = static_cast<enum Resolutions>(0), enum Resolutions t_cameraResolution2 = VGA) {
            this->init(t_str, t_b, t_c, t_sc, t_uc, t_i, t_si, t_sii, t_u, t_ui, t_u8, t_u16, t_u32, t_u64, t_i8, t_i16, t_i32, t_i64, t_s, t_si_2, t_ss, t_ssi, t_us, t_usi, t_l, t_li, t_sl, t_sli, t_ul, t_uli, t_ll, t_lli, t_sll, t_slli, t_ull, t_ulli, t_f, t_ft, t_d, t_dt, t_str2, t_b2, t_c2, t_sc2, t_uc2, t_i2, t_si2, t_sii2, t_u2, t_ui2, t_u82, t_u162, t_u322, t_u642, t_i82, t_i162, t_i322, t_i642, t_s2, t_si_22, t_ss2, t_ssi2, t_us2, t_usi2, t_l2, t_li2, t_sl2, t_sli2, t_ul2, t_uli2, t_ll2, t_lli2, t_sll2, t_slli2, t_ull2, t_ulli2, t_f2, t_ft2, t_d2, t_dt2, t_strct, t_array16, t_bools, t_myBit, t_myBit2, t_sub1, t_sub2, t_subs, t_cameraResolution, t_cameraResolution2);
        }

        /**
         * Copy Constructor.
         */
        Demo(const Demo &t_other): wb_demo() {
            this->init(t_other.str(), t_other.b(), t_other.c(), t_other.sc(), t_other.uc(), t_other.i(), t_other.si(), t_other.sii(), t_other.u(), t_other.ui(), t_other.u8(), t_other.u16(), t_other.u32(), t_other.u64(), t_other.i8(), t_other.i16(), t_other.i32(), t_other.i64(), t_other.s(), t_other.si_2(), t_other.ss(), t_other.ssi(), t_other.us(), t_other.usi(), t_other.l(), t_other.li(), t_other.sl(), t_other.sli(), t_other.ul(), t_other.uli(), t_other.ll(), t_other.lli(), t_other.sll(), t_other.slli(), t_other.ull(), t_other.ulli(), t_other.f(), t_other.ft(), t_other.d(), t_other.dt(), t_other.str2(), t_other.b2(), t_other.c2(), t_other.sc2(), t_other.uc2(), t_other.i2(), t_other.si2(), t_other.sii2(), t_other.u2(), t_other.ui2(), t_other.u82(), t_other.u162(), t_other.u322(), t_other.u642(), t_other.i82(), t_other.i162(), t_other.i322(), t_other.i642(), t_other.s2(), t_other.si_22(), t_other.ss2(), t_other.ssi2(), t_other.us2(), t_other.usi2(), t_other.l2(), t_other.li2(), t_other.sl2(), t_other.sli2(), t_other.ul2(), t_other.uli2(), t_other.ll2(), t_other.lli2(), t_other.sll2(), t_other.slli2(), t_other.ull2(), t_other.ulli2(), t_other.f2(), t_other.ft2(), t_other.d2(), t_other.dt2(), t_other.strct(), t_other.array16(), t_other.bools(), t_other.myBit(), t_other.myBit2(), t_other.sub1(), t_other.sub2(), t_other.subs(), t_other.cameraResolution(), t_other.cameraResolution2());
        }

        /**
         * Copy Constructor.
         */
        Demo(const struct wb_demo &t_other): wb_demo() {
            this->init(t_other.str, t_other.b, t_other.c, t_other.sc, t_other.uc, t_other.i, t_other.si, t_other.sii, t_other.u, t_other.ui, t_other.u8, t_other.u16, t_other.u32, t_other.u64, t_other.i8, t_other.i16, t_other.i32, t_other.i64, t_other.s, t_other.si_2, t_other.ss, t_other.ssi, t_other.us, t_other.usi, t_other.l, t_other.li, t_other.sl, t_other.sli, t_other.ul, t_other.uli, t_other.ll, t_other.lli, t_other.sll, t_other.slli, t_other.ull, t_other.ulli, t_other.f, t_other.ft, t_other.d, t_other.dt, t_other.str2, t_other.b2, t_other.c2, t_other.sc2, t_other.uc2, t_other.i2, t_other.si2, t_other.sii2, t_other.u2, t_other.ui2, t_other.u82, t_other.u162, t_other.u322, t_other.u642, t_other.i82, t_other.i162, t_other.i322, t_other.i642, t_other.s2, t_other.si_22, t_other.ss2, t_other.ssi2, t_other.us2, t_other.usi2, t_other.l2, t_other.li2, t_other.sl2, t_other.sli2, t_other.ul2, t_other.uli2, t_other.ll2, t_other.lli2, t_other.sll2, t_other.slli2, t_other.ull2, t_other.ulli2, t_other.f2, t_other.ft2, t_other.d2, t_other.dt2, t_other.strct, t_other.array16, t_other.bools, t_other.myBit, t_other.myBit2, t_other.sub1, t_other.sub2, t_other.subs, t_other.cameraResolution, t_other.cameraResolution2);
        }

        /**
         * Copy Assignment Operator.
         */
        Demo &operator = (const Demo &t_other) {
            this->init(t_other.str(), t_other.b(), t_other.c(), t_other.sc(), t_other.uc(), t_other.i(), t_other.si(), t_other.sii(), t_other.u(), t_other.ui(), t_other.u8(), t_other.u16(), t_other.u32(), t_other.u64(), t_other.i8(), t_other.i16(), t_other.i32(), t_other.i64(), t_other.s(), t_other.si_2(), t_other.ss(), t_other.ssi(), t_other.us(), t_other.usi(), t_other.l(), t_other.li(), t_other.sl(), t_other.sli(), t_other.ul(), t_other.uli(), t_other.ll(), t_other.lli(), t_other.sll(), t_other.slli(), t_other.ull(), t_other.ulli(), t_other.f(), t_other.ft(), t_other.d(), t_other.dt(), t_other.str2(), t_other.b2(), t_other.c2(), t_other.sc2(), t_other.uc2(), t_other.i2(), t_other.si2(), t_other.sii2(), t_other.u2(), t_other.ui2(), t_other.u82(), t_other.u162(), t_other.u322(), t_other.u642(), t_other.i82(), t_other.i162(), t_other.i322(), t_other.i642(), t_other.s2(), t_other.si_22(), t_other.ss2(), t_other.ssi2(), t_other.us2(), t_other.usi2(), t_other.l2(), t_other.li2(), t_other.sl2(), t_other.sli2(), t_other.ul2(), t_other.uli2(), t_other.ll2(), t_other.lli2(), t_other.sll2(), t_other.slli2(), t_other.ull2(), t_other.ulli2(), t_other.f2(), t_other.ft2(), t_other.d2(), t_other.dt2(), t_other.strct(), t_other.array16(), t_other.bools(), t_other.myBit(), t_other.myBit2(), t_other.sub1(), t_other.sub2(), t_other.subs(), t_other.cameraResolution(), t_other.cameraResolution2());
            return *this;
        }

        /**
         * Copy Assignment Operator.
         */
        Demo &operator = (const struct wb_demo &t_other) {
            this->init(t_other.str, t_other.b, t_other.c, t_other.sc, t_other.uc, t_other.i, t_other.si, t_other.sii, t_other.u, t_other.ui, t_other.u8, t_other.u16, t_other.u32, t_other.u64, t_other.i8, t_other.i16, t_other.i32, t_other.i64, t_other.s, t_other.si_2, t_other.ss, t_other.ssi, t_other.us, t_other.usi, t_other.l, t_other.li, t_other.sl, t_other.sli, t_other.ul, t_other.uli, t_other.ll, t_other.lli, t_other.sll, t_other.slli, t_other.ull, t_other.ulli, t_other.f, t_other.ft, t_other.d, t_other.dt, t_other.str2, t_other.b2, t_other.c2, t_other.sc2, t_other.uc2, t_other.i2, t_other.si2, t_other.sii2, t_other.u2, t_other.ui2, t_other.u82, t_other.u162, t_other.u322, t_other.u642, t_other.i82, t_other.i162, t_other.i322, t_other.i642, t_other.s2, t_other.si_22, t_other.ss2, t_other.ssi2, t_other.us2, t_other.usi2, t_other.l2, t_other.li2, t_other.sl2, t_other.sli2, t_other.ul2, t_other.uli2, t_other.ll2, t_other.lli2, t_other.sll2, t_other.slli2, t_other.ull2, t_other.ulli2, t_other.f2, t_other.ft2, t_other.d2, t_other.dt2, t_other.strct, t_other.array16, t_other.bools, t_other.myBit, t_other.myBit2, t_other.sub1, t_other.sub2, t_other.subs, t_other.cameraResolution, t_other.cameraResolution2);
            return *this;
        }

        bool operator ==(const Demo &t_other) const
        {
            if (!(0 == strncmp(str(), t_other.str(), 6)
                && b() == t_other.b()
                && c() == t_other.c()
                && sc() == t_other.sc()
                && uc() == t_other.uc()
                && i() == t_other.i()
                && si() == t_other.si()
                && sii() == t_other.sii()
                && u() == t_other.u()
                && ui() == t_other.ui()
                && u8() == t_other.u8()
                && u16() == t_other.u16()
                && u32() == t_other.u32()
                && u64() == t_other.u64()
                && i8() == t_other.i8()
                && i16() == t_other.i16()
                && i32() == t_other.i32()
                && i64() == t_other.i64()
                && s() == t_other.s()
                && si_2() == t_other.si_2()
                && ss() == t_other.ss()
                && ssi() == t_other.ssi()
                && us() == t_other.us()
                && usi() == t_other.usi()
                && l() == t_other.l()
                && li() == t_other.li()
                && sl() == t_other.sl()
                && sli() == t_other.sli()
                && ul() == t_other.ul()
                && uli() == t_other.uli()
                && ll() == t_other.ll()
                && lli() == t_other.lli()
                && sll() == t_other.sll()
                && slli() == t_other.slli()
                && ull() == t_other.ull()
                && ulli() == t_other.ulli()
                && fabsf(f() - t_other.f()) < FLT_EPSILON
                && fabsf(ft() - t_other.ft()) < FLT_EPSILON
                && fabs(d() - t_other.d()) < DBL_EPSILON
                && fabs(dt() - t_other.dt()) < DBL_EPSILON
                && 0 == strncmp(str2(), t_other.str2(), 6)
                && b2() == t_other.b2()
                && c2() == t_other.c2()
                && sc2() == t_other.sc2()
                && uc2() == t_other.uc2()
                && i2() == t_other.i2()
                && si2() == t_other.si2()
                && sii2() == t_other.sii2()
                && u2() == t_other.u2()
                && ui2() == t_other.ui2()
                && u82() == t_other.u82()
                && u162() == t_other.u162()
                && u322() == t_other.u322()
                && u642() == t_other.u642()
                && i82() == t_other.i82()
                && i162() == t_other.i162()
                && i322() == t_other.i322()
                && i642() == t_other.i642()
                && s2() == t_other.s2()
                && si_22() == t_other.si_22()
                && ss2() == t_other.ss2()
                && ssi2() == t_other.ssi2()
                && us2() == t_other.us2()
                && usi2() == t_other.usi2()
                && l2() == t_other.l2()
                && li2() == t_other.li2()
                && sl2() == t_other.sl2()
                && sli2() == t_other.sli2()
                && ul2() == t_other.ul2()
                && uli2() == t_other.uli2()
                && ll2() == t_other.ll2()
                && lli2() == t_other.lli2()
                && sll2() == t_other.sll2()
                && slli2() == t_other.slli2()
                && ull2() == t_other.ull2()
                && ulli2() == t_other.ulli2()
                && fabsf(f2() - t_other.f2()) < FLT_EPSILON
                && fabsf(ft2() - t_other.ft2()) < FLT_EPSILON
                && fabs(d2() - t_other.d2()) < DBL_EPSILON
                && fabs(dt2() - t_other.dt2()) < DBL_EPSILON
                && myBit() == t_other.myBit()
                && myBit2() == t_other.myBit2()
                && Sub(sub1()) == Sub(t_other.sub1())
                && Sub(sub2()) == Sub(t_other.sub2())
                && cameraResolution() == t_other.cameraResolution()
                && cameraResolution2() == t_other.cameraResolution2()))
            {
                return false;
            }
            for (int array16_0_index = 0; array16_0_index < 4; array16_0_index++)
            {
                if (!(array16(array16_0_index) == t_other.array16(array16_0_index))) return false;
            }
            for (int bools_0_index = 0; bools_0_index < 3; bools_0_index++)
            {
                if (!(bools(bools_0_index) == t_other.bools(bools_0_index))) return false;
            }
            for (int subs_0_index = 0; subs_0_index < 3; subs_0_index++)
            {
                if (!(Sub(subs(subs_0_index)) == Sub(t_other.subs(subs_0_index)))) return false;
            }
            return true;
        }

        bool operator !=(const Demo &t_other) const
        {
            return !(*this == t_other);
        }

        bool operator ==(const wb_demo &t_other) const
        {
            return *this == Demo(t_other);
        }

        bool operator !=(const wb_demo &t_other) const
        {
            return !(*this == t_other);
        }

        const char * str() const
        {
            return &(wb_demo::str[0]);
        }

        size_t str_size() const
        {
            return 6;
        }

        char & str(int t_i)
        {
            return wb_demo::str[t_i];
        }

        const char & str(int t_i) const
        {
            return wb_demo::str[t_i];
        }

        void set_str(const char *t_newValue)
        {
            strncpy(wb_demo::str, t_newValue, 6);
        }

        bool & b()
        {
            return wb_demo::b;
        }

        const bool & b() const
        {
            return wb_demo::b;
        }

        void set_b(const bool &t_newValue)
        {
            wb_demo::b = t_newValue;
        }

        char & c()
        {
            return wb_demo::c;
        }

        const char & c() const
        {
            return wb_demo::c;
        }

        void set_c(const char &t_newValue)
        {
            wb_demo::c = t_newValue;
        }

        signed char & sc()
        {
            return wb_demo::sc;
        }

        const signed char & sc() const
        {
            return wb_demo::sc;
        }

        void set_sc(const signed char &t_newValue)
        {
            wb_demo::sc = t_newValue;
        }

        unsigned char & uc()
        {
            return wb_demo::uc;
        }

        const unsigned char & uc() const
        {
            return wb_demo::uc;
        }

        void set_uc(const unsigned char &t_newValue)
        {
            wb_demo::uc = t_newValue;
        }

        int & i()
        {
            return wb_demo::i;
        }

        const int & i() const
        {
            return wb_demo::i;
        }

        void set_i(const int &t_newValue)
        {
            wb_demo::i = t_newValue;
        }

        signed & si()
        {
            return wb_demo::si;
        }

        const signed & si() const
        {
            return wb_demo::si;
        }

        void set_si(const signed &t_newValue)
        {
            wb_demo::si = t_newValue;
        }

        signed int & sii()
        {
            return wb_demo::sii;
        }

        const signed int & sii() const
        {
            return wb_demo::sii;
        }

        void set_sii(const signed int &t_newValue)
        {
            wb_demo::sii = t_newValue;
        }

        unsigned & u()
        {
            return wb_demo::u;
        }

        const unsigned & u() const
        {
            return wb_demo::u;
        }

        void set_u(const unsigned &t_newValue)
        {
            wb_demo::u = t_newValue;
        }

        unsigned int & ui()
        {
            return wb_demo::ui;
        }

        const unsigned int & ui() const
        {
            return wb_demo::ui;
        }

        void set_ui(const unsigned int &t_newValue)
        {
            wb_demo::ui = t_newValue;
        }

        uint8_t & u8()
        {
            return wb_demo::u8;
        }

        const uint8_t & u8() const
        {
            return wb_demo::u8;
        }

        void set_u8(const uint8_t &t_newValue)
        {
            wb_demo::u8 = t_newValue;
        }

        uint16_t & u16()
        {
            return wb_demo::u16;
        }

        const uint16_t & u16() const
        {
            return wb_demo::u16;
        }

        void set_u16(const uint16_t &t_newValue)
        {
            wb_demo::u16 = t_newValue;
        }

        uint32_t & u32()
        {
            return wb_demo::u32;
        }

        const uint32_t & u32() const
        {
            return wb_demo::u32;
        }

        void set_u32(const uint32_t &t_newValue)
        {
            wb_demo::u32 = t_newValue;
        }

        uint64_t & u64()
        {
            return wb_demo::u64;
        }

        const uint64_t & u64() const
        {
            return wb_demo::u64;
        }

        void set_u64(const uint64_t &t_newValue)
        {
            wb_demo::u64 = t_newValue;
        }

        int8_t & i8()
        {
            return wb_demo::i8;
        }

        const int8_t & i8() const
        {
            return wb_demo::i8;
        }

        void set_i8(const int8_t &t_newValue)
        {
            wb_demo::i8 = t_newValue;
        }

        int16_t & i16()
        {
            return wb_demo::i16;
        }

        const int16_t & i16() const
        {
            return wb_demo::i16;
        }

        void set_i16(const int16_t &t_newValue)
        {
            wb_demo::i16 = t_newValue;
        }

        int32_t & i32()
        {
            return wb_demo::i32;
        }

        const int32_t & i32() const
        {
            return wb_demo::i32;
        }

        void set_i32(const int32_t &t_newValue)
        {
            wb_demo::i32 = t_newValue;
        }

        int64_t & i64()
        {
            return wb_demo::i64;
        }

        const int64_t & i64() const
        {
            return wb_demo::i64;
        }

        void set_i64(const int64_t &t_newValue)
        {
            wb_demo::i64 = t_newValue;
        }

        short & s()
        {
            return wb_demo::s;
        }

        const short & s() const
        {
            return wb_demo::s;
        }

        void set_s(const short &t_newValue)
        {
            wb_demo::s = t_newValue;
        }

        short int & si_2()
        {
            return wb_demo::si_2;
        }

        const short int & si_2() const
        {
            return wb_demo::si_2;
        }

        void set_si_2(const short int &t_newValue)
        {
            wb_demo::si_2 = t_newValue;
        }

        signed short & ss()
        {
            return wb_demo::ss;
        }

        const signed short & ss() const
        {
            return wb_demo::ss;
        }

        void set_ss(const signed short &t_newValue)
        {
            wb_demo::ss = t_newValue;
        }

        signed short int & ssi()
        {
            return wb_demo::ssi;
        }

        const signed short int & ssi() const
        {
            return wb_demo::ssi;
        }

        void set_ssi(const signed short int &t_newValue)
        {
            wb_demo::ssi = t_newValue;
        }

        unsigned short & us()
        {
            return wb_demo::us;
        }

        const unsigned short & us() const
        {
            return wb_demo::us;
        }

        void set_us(const unsigned short &t_newValue)
        {
            wb_demo::us = t_newValue;
        }

        unsigned short int & usi()
        {
            return wb_demo::usi;
        }

        const unsigned short int & usi() const
        {
            return wb_demo::usi;
        }

        void set_usi(const unsigned short int &t_newValue)
        {
            wb_demo::usi = t_newValue;
        }

        long & l()
        {
            return wb_demo::l;
        }

        const long & l() const
        {
            return wb_demo::l;
        }

        void set_l(const long &t_newValue)
        {
            wb_demo::l = t_newValue;
        }

        long int & li()
        {
            return wb_demo::li;
        }

        const long int & li() const
        {
            return wb_demo::li;
        }

        void set_li(const long int &t_newValue)
        {
            wb_demo::li = t_newValue;
        }

        signed long & sl()
        {
            return wb_demo::sl;
        }

        const signed long & sl() const
        {
            return wb_demo::sl;
        }

        void set_sl(const signed long &t_newValue)
        {
            wb_demo::sl = t_newValue;
        }

        signed long int & sli()
        {
            return wb_demo::sli;
        }

        const signed long int & sli() const
        {
            return wb_demo::sli;
        }

        void set_sli(const signed long int &t_newValue)
        {
            wb_demo::sli = t_newValue;
        }

        unsigned long & ul()
        {
            return wb_demo::ul;
        }

        const unsigned long & ul() const
        {
            return wb_demo::ul;
        }

        void set_ul(const unsigned long &t_newValue)
        {
            wb_demo::ul = t_newValue;
        }

        unsigned long int & uli()
        {
            return wb_demo::uli;
        }

        const unsigned long int & uli() const
        {
            return wb_demo::uli;
        }

        void set_uli(const unsigned long int &t_newValue)
        {
            wb_demo::uli = t_newValue;
        }

        long long & ll()
        {
            return wb_demo::ll;
        }

        const long long & ll() const
        {
            return wb_demo::ll;
        }

        void set_ll(const long long &t_newValue)
        {
            wb_demo::ll = t_newValue;
        }

        long long int & lli()
        {
            return wb_demo::lli;
        }

        const long long int & lli() const
        {
            return wb_demo::lli;
        }

        void set_lli(const long long int &t_newValue)
        {
            wb_demo::lli = t_newValue;
        }

        signed long long & sll()
        {
            return wb_demo::sll;
        }

        const signed long long & sll() const
        {
            return wb_demo::sll;
        }

        void set_sll(const signed long long &t_newValue)
        {
            wb_demo::sll = t_newValue;
        }

        signed long long int & slli()
        {
            return wb_demo::slli;
        }

        const signed long long int & slli() const
        {
            return wb_demo::slli;
        }

        void set_slli(const signed long long int &t_newValue)
        {
            wb_demo::slli = t_newValue;
        }

        unsigned long long & ull()
        {
            return wb_demo::ull;
        }

        const unsigned long long & ull() const
        {
            return wb_demo::ull;
        }

        void set_ull(const unsigned long long &t_newValue)
        {
            wb_demo::ull = t_newValue;
        }

        unsigned long long int & ulli()
        {
            return wb_demo::ulli;
        }

        const unsigned long long int & ulli() const
        {
            return wb_demo::ulli;
        }

        void set_ulli(const unsigned long long int &t_newValue)
        {
            wb_demo::ulli = t_newValue;
        }

        float & f()
        {
            return wb_demo::f;
        }

        const float & f() const
        {
            return wb_demo::f;
        }

        void set_f(const float &t_newValue)
        {
            wb_demo::f = t_newValue;
        }

        float_t & ft()
        {
            return wb_demo::ft;
        }

        const float_t & ft() const
        {
            return wb_demo::ft;
        }

        void set_ft(const float_t &t_newValue)
        {
            wb_demo::ft = t_newValue;
        }

        double & d()
        {
            return wb_demo::d;
        }

        const double & d() const
        {
            return wb_demo::d;
        }

        void set_d(const double &t_newValue)
        {
            wb_demo::d = t_newValue;
        }

        double_t & dt()
        {
            return wb_demo::dt;
        }

        const double_t & dt() const
        {
            return wb_demo::dt;
        }

        void set_dt(const double_t &t_newValue)
        {
            wb_demo::dt = t_newValue;
        }

        const char * str2() const
        {
            return &(wb_demo::str2[0]);
        }

        size_t str2_size() const
        {
            return 6;
        }

        char & str2(int t_i)
        {
            return wb_demo::str2[t_i];
        }

        const char & str2(int t_i) const
        {
            return wb_demo::str2[t_i];
        }

        void set_str2(const char *t_newValue)
        {
            strncpy(wb_demo::str2, t_newValue, 6);
        }

        bool & b2()
        {
            return wb_demo::b2;
        }

        const bool & b2() const
        {
            return wb_demo::b2;
        }

        void set_b2(const bool &t_newValue)
        {
            wb_demo::b2 = t_newValue;
        }

        char & c2()
        {
            return wb_demo::c2;
        }

        const char & c2() const
        {
            return wb_demo::c2;
        }

        void set_c2(const char &t_newValue)
        {
            wb_demo::c2 = t_newValue;
        }

        signed char & sc2()
        {
            return wb_demo::sc2;
        }

        const signed char & sc2() const
        {
            return wb_demo::sc2;
        }

        void set_sc2(const signed char &t_newValue)
        {
            wb_demo::sc2 = t_newValue;
        }

        unsigned char & uc2()
        {
            return wb_demo::uc2;
        }

        const unsigned char & uc2() const
        {
            return wb_demo::uc2;
        }

        void set_uc2(const unsigned char &t_newValue)
        {
            wb_demo::uc2 = t_newValue;
        }

        int & i2()
        {
            return wb_demo::i2;
        }

        const int & i2() const
        {
            return wb_demo::i2;
        }

        void set_i2(const int &t_newValue)
        {
            wb_demo::i2 = t_newValue;
        }

        signed & si2()
        {
            return wb_demo::si2;
        }

        const signed & si2() const
        {
            return wb_demo::si2;
        }

        void set_si2(const signed &t_newValue)
        {
            wb_demo::si2 = t_newValue;
        }

        signed int & sii2()
        {
            return wb_demo::sii2;
        }

        const signed int & sii2() const
        {
            return wb_demo::sii2;
        }

        void set_sii2(const signed int &t_newValue)
        {
            wb_demo::sii2 = t_newValue;
        }

        unsigned & u2()
        {
            return wb_demo::u2;
        }

        const unsigned & u2() const
        {
            return wb_demo::u2;
        }

        void set_u2(const unsigned &t_newValue)
        {
            wb_demo::u2 = t_newValue;
        }

        unsigned int & ui2()
        {
            return wb_demo::ui2;
        }

        const unsigned int & ui2() const
        {
            return wb_demo::ui2;
        }

        void set_ui2(const unsigned int &t_newValue)
        {
            wb_demo::ui2 = t_newValue;
        }

        uint8_t & u82()
        {
            return wb_demo::u82;
        }

        const uint8_t & u82() const
        {
            return wb_demo::u82;
        }

        void set_u82(const uint8_t &t_newValue)
        {
            wb_demo::u82 = t_newValue;
        }

        uint16_t & u162()
        {
            return wb_demo::u162;
        }

        const uint16_t & u162() const
        {
            return wb_demo::u162;
        }

        void set_u162(const uint16_t &t_newValue)
        {
            wb_demo::u162 = t_newValue;
        }

        uint32_t & u322()
        {
            return wb_demo::u322;
        }

        const uint32_t & u322() const
        {
            return wb_demo::u322;
        }

        void set_u322(const uint32_t &t_newValue)
        {
            wb_demo::u322 = t_newValue;
        }

        uint64_t & u642()
        {
            return wb_demo::u642;
        }

        const uint64_t & u642() const
        {
            return wb_demo::u642;
        }

        void set_u642(const uint64_t &t_newValue)
        {
            wb_demo::u642 = t_newValue;
        }

        int8_t & i82()
        {
            return wb_demo::i82;
        }

        const int8_t & i82() const
        {
            return wb_demo::i82;
        }

        void set_i82(const int8_t &t_newValue)
        {
            wb_demo::i82 = t_newValue;
        }

        int16_t & i162()
        {
            return wb_demo::i162;
        }

        const int16_t & i162() const
        {
            return wb_demo::i162;
        }

        void set_i162(const int16_t &t_newValue)
        {
            wb_demo::i162 = t_newValue;
        }

        int32_t & i322()
        {
            return wb_demo::i322;
        }

        const int32_t & i322() const
        {
            return wb_demo::i322;
        }

        void set_i322(const int32_t &t_newValue)
        {
            wb_demo::i322 = t_newValue;
        }

        int64_t & i642()
        {
            return wb_demo::i642;
        }

        const int64_t & i642() const
        {
            return wb_demo::i642;
        }

        void set_i642(const int64_t &t_newValue)
        {
            wb_demo::i642 = t_newValue;
        }

        short & s2()
        {
            return wb_demo::s2;
        }

        const short & s2() const
        {
            return wb_demo::s2;
        }

        void set_s2(const short &t_newValue)
        {
            wb_demo::s2 = t_newValue;
        }

        short int & si_22()
        {
            return wb_demo::si_22;
        }

        const short int & si_22() const
        {
            return wb_demo::si_22;
        }

        void set_si_22(const short int &t_newValue)
        {
            wb_demo::si_22 = t_newValue;
        }

        signed short & ss2()
        {
            return wb_demo::ss2;
        }

        const signed short & ss2() const
        {
            return wb_demo::ss2;
        }

        void set_ss2(const signed short &t_newValue)
        {
            wb_demo::ss2 = t_newValue;
        }

        signed short int & ssi2()
        {
            return wb_demo::ssi2;
        }

        const signed short int & ssi2() const
        {
            return wb_demo::ssi2;
        }

        void set_ssi2(const signed short int &t_newValue)
        {
            wb_demo::ssi2 = t_newValue;
        }

        unsigned short & us2()
        {
            return wb_demo::us2;
        }

        const unsigned short & us2() const
        {
            return wb_demo::us2;
        }

        void set_us2(const unsigned short &t_newValue)
        {
            wb_demo::us2 = t_newValue;
        }

        unsigned short int & usi2()
        {
            return wb_demo::usi2;
        }

        const unsigned short int & usi2() const
        {
            return wb_demo::usi2;
        }

        void set_usi2(const unsigned short int &t_newValue)
        {
            wb_demo::usi2 = t_newValue;
        }

        long & l2()
        {
            return wb_demo::l2;
        }

        const long & l2() const
        {
            return wb_demo::l2;
        }

        void set_l2(const long &t_newValue)
        {
            wb_demo::l2 = t_newValue;
        }

        long int & li2()
        {
            return wb_demo::li2;
        }

        const long int & li2() const
        {
            return wb_demo::li2;
        }

        void set_li2(const long int &t_newValue)
        {
            wb_demo::li2 = t_newValue;
        }

        signed long & sl2()
        {
            return wb_demo::sl2;
        }

        const signed long & sl2() const
        {
            return wb_demo::sl2;
        }

        void set_sl2(const signed long &t_newValue)
        {
            wb_demo::sl2 = t_newValue;
        }

        signed long int & sli2()
        {
            return wb_demo::sli2;
        }

        const signed long int & sli2() const
        {
            return wb_demo::sli2;
        }

        void set_sli2(const signed long int &t_newValue)
        {
            wb_demo::sli2 = t_newValue;
        }

        unsigned long & ul2()
        {
            return wb_demo::ul2;
        }

        const unsigned long & ul2() const
        {
            return wb_demo::ul2;
        }

        void set_ul2(const unsigned long &t_newValue)
        {
            wb_demo::ul2 = t_newValue;
        }

        unsigned long int & uli2()
        {
            return wb_demo::uli2;
        }

        const unsigned long int & uli2() const
        {
            return wb_demo::uli2;
        }

        void set_uli2(const unsigned long int &t_newValue)
        {
            wb_demo::uli2 = t_newValue;
        }

        long long & ll2()
        {
            return wb_demo::ll2;
        }

        const long long & ll2() const
        {
            return wb_demo::ll2;
        }

        void set_ll2(const long long &t_newValue)
        {
            wb_demo::ll2 = t_newValue;
        }

        long long int & lli2()
        {
            return wb_demo::lli2;
        }

        const long long int & lli2() const
        {
            return wb_demo::lli2;
        }

        void set_lli2(const long long int &t_newValue)
        {
            wb_demo::lli2 = t_newValue;
        }

        signed long long & sll2()
        {
            return wb_demo::sll2;
        }

        const signed long long & sll2() const
        {
            return wb_demo::sll2;
        }

        void set_sll2(const signed long long &t_newValue)
        {
            wb_demo::sll2 = t_newValue;
        }

        signed long long int & slli2()
        {
            return wb_demo::slli2;
        }

        const signed long long int & slli2() const
        {
            return wb_demo::slli2;
        }

        void set_slli2(const signed long long int &t_newValue)
        {
            wb_demo::slli2 = t_newValue;
        }

        unsigned long long & ull2()
        {
            return wb_demo::ull2;
        }

        const unsigned long long & ull2() const
        {
            return wb_demo::ull2;
        }

        void set_ull2(const unsigned long long &t_newValue)
        {
            wb_demo::ull2 = t_newValue;
        }

        unsigned long long int & ulli2()
        {
            return wb_demo::ulli2;
        }

        const unsigned long long int & ulli2() const
        {
            return wb_demo::ulli2;
        }

        void set_ulli2(const unsigned long long int &t_newValue)
        {
            wb_demo::ulli2 = t_newValue;
        }

        float & f2()
        {
            return wb_demo::f2;
        }

        const float & f2() const
        {
            return wb_demo::f2;
        }

        void set_f2(const float &t_newValue)
        {
            wb_demo::f2 = t_newValue;
        }

        float_t & ft2()
        {
            return wb_demo::ft2;
        }

        const float_t & ft2() const
        {
            return wb_demo::ft2;
        }

        void set_ft2(const float_t &t_newValue)
        {
            wb_demo::ft2 = t_newValue;
        }

        double & d2()
        {
            return wb_demo::d2;
        }

        const double & d2() const
        {
            return wb_demo::d2;
        }

        void set_d2(const double &t_newValue)
        {
            wb_demo::d2 = t_newValue;
        }

        double_t & dt2()
        {
            return wb_demo::dt2;
        }

        const double_t & dt2() const
        {
            return wb_demo::dt2;
        }

        void set_dt2(const double_t &t_newValue)
        {
            wb_demo::dt2 = t_newValue;
        }

        struct somestruct & strct()
        {
            return wb_demo::strct;
        }

        const struct somestruct & strct() const
        {
            return wb_demo::strct;
        }

        void set_strct(const struct somestruct &t_newValue)
        {
            wb_demo::strct = t_newValue;
        }

        const int16_t * array16() const
        {
            return &(wb_demo::array16[0]);
        }

        size_t array16_size() const
        {
            return DEMO_ARRAY16_ARRAY_SIZE;
        }

        int16_t & array16(int t_i)
        {
            return wb_demo::array16[t_i];
        }

        const int16_t & array16(int t_i) const
        {
            return wb_demo::array16[t_i];
        }

        void set_array16(const int16_t *t_newValue)
        {
            memcpy(wb_demo::array16, t_newValue, DEMO_ARRAY16_ARRAY_SIZE * (sizeof (int16_t)));
        }

        void set_array16(const int16_t &t_newValue, int t_i)
        {
            wb_demo::array16[t_i] = t_newValue;
        }

        const bool * bools() const
        {
            return &(wb_demo::bools[0]);
        }

        size_t bools_size() const
        {
            return DEMO_BOOLS_ARRAY_SIZE;
        }

        bool & bools(int t_i)
        {
            return wb_demo::bools[t_i];
        }

        const bool & bools(int t_i) const
        {
            return wb_demo::bools[t_i];
        }

        void set_bools(const bool *t_newValue)
        {
            memcpy(wb_demo::bools, t_newValue, DEMO_BOOLS_ARRAY_SIZE * (sizeof (bool)));
        }

        void set_bools(const bool &t_newValue, int t_i)
        {
            wb_demo::bools[t_i] = t_newValue;
        }

        unsigned int myBit() const
        {
            return wb_demo::myBit;
        }

        void set_myBit(const unsigned int &t_newValue)
        {
            wb_demo::myBit = t_newValue;
        }

        unsigned int myBit2() const
        {
            return wb_demo::myBit2;
        }

        void set_myBit2(const unsigned int &t_newValue)
        {
            wb_demo::myBit2 = t_newValue;
        }

        Sub & sub1()
        {
            return const_cast<Sub &>(static_cast<const Sub &>(wb_demo::sub1));
        }

        const Sub & sub1() const
        {
            return static_cast<const Sub &>(wb_demo::sub1);
        }

        void set_sub1(const Sub &t_newValue)
        {
            wb_demo::sub1 = static_cast<wb_sub>(t_newValue);
        }

        Sub & sub2()
        {
            return const_cast<Sub &>(static_cast<const Sub &>(wb_demo::sub2));
        }

        const Sub & sub2() const
        {
            return static_cast<const Sub &>(wb_demo::sub2);
        }

        void set_sub2(const Sub &t_newValue)
        {
            wb_demo::sub2 = static_cast<wb_sub>(t_newValue);
        }

        const Sub * subs() const
        {
            return static_cast<const Sub *>(&(wb_demo::subs[0]));
        }

        size_t subs_size() const
        {
            return DEMO_SUBS_ARRAY_SIZE;
        }

        Sub & subs(int t_i)
        {
            return const_cast<Sub &>(static_cast<const Sub &>(wb_demo::subs[t_i]));
        }

        const Sub & subs(int t_i) const
        {
            return static_cast<const Sub &>(wb_demo::subs[t_i]);
        }

        void set_subs(const Sub *t_newValue)
        {
            memcpy(wb_demo::subs, static_cast<const struct wb_sub *>(t_newValue), DEMO_SUBS_ARRAY_SIZE * (sizeof (struct wb_sub)));
        }

        void set_subs(const Sub &t_newValue, int t_i)
        {
            wb_demo::subs[t_i] = static_cast<wb_sub>(t_newValue);
        }

        enum Resolutions & cameraResolution()
        {
            return wb_demo::cameraResolution;
        }

        const enum Resolutions & cameraResolution() const
        {
            return wb_demo::cameraResolution;
        }

        void set_cameraResolution(const enum Resolutions &t_newValue)
        {
            wb_demo::cameraResolution = t_newValue;
        }

        enum Resolutions & cameraResolution2()
        {
            return wb_demo::cameraResolution2;
        }

        const enum Resolutions & cameraResolution2() const
        {
            return wb_demo::cameraResolution2;
        }

        void set_cameraResolution2(const enum Resolutions &t_newValue)
        {
            wb_demo::cameraResolution2 = t_newValue;
        }

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
        /**
         * String Constructor.
         */
        Demo(const std::string &t_str) {
            this->init();
            this->from_string(t_str);
        }

        std::string description() {
#ifdef USE_WB_DEMO_C_CONVERSION
            char buffer[DEMO_DESC_BUFFER_SIZE];
            wb_demo_description(this, buffer, sizeof(buffer));
            std::string descr = buffer;
            return descr;
#else
            std::ostringstream ss;
            if (0 == strncmp("", this->str(), 1)) {
                ss << "str=" << "";
            } else {
                ss << "str=" << this->str();
            }
            ss << ", ";
            ss << "b=" << (this->b() ? "true" : "false");
            ss << ", ";
            if (this->c() == 0) {
                ss << "c=" << "";
            } else {
                ss << "c=" << this->c();
            }
            ss << ", ";
            if (this->sc() == 0) {
                ss << "sc=" << "";
            } else {
                ss << "sc=" << this->sc();
            }
            ss << ", ";
            if (this->uc() == 0) {
                ss << "uc=" << "";
            } else {
                ss << "uc=" << this->uc();
            }
            ss << ", ";
            ss << "i=" << static_cast<signed>(this->i());
            ss << ", ";
            ss << "si=" << static_cast<signed>(this->si());
            ss << ", ";
            ss << "sii=" << static_cast<signed>(this->sii());
            ss << ", ";
            ss << "u=" << static_cast<unsigned>(this->u());
            ss << ", ";
            ss << "ui=" << static_cast<unsigned>(this->ui());
            ss << ", ";
            ss << "u8=" << static_cast<unsigned>(this->u8());
            ss << ", ";
            ss << "u16=" << static_cast<unsigned>(this->u16());
            ss << ", ";
            ss << "u32=" << static_cast<unsigned>(this->u32());
            ss << ", ";
            ss << "u64=" << this->u64();
            ss << ", ";
            ss << "i8=" << static_cast<signed>(this->i8());
            ss << ", ";
            ss << "i16=" << static_cast<signed>(this->i16());
            ss << ", ";
            ss << "i32=" << static_cast<signed>(this->i32());
            ss << ", ";
            ss << "i64=" << this->i64();
            ss << ", ";
            ss << "s=" << static_cast<signed>(this->s());
            ss << ", ";
            ss << "si_2=" << static_cast<signed>(this->si_2());
            ss << ", ";
            ss << "ss=" << static_cast<signed>(this->ss());
            ss << ", ";
            ss << "ssi=" << static_cast<signed>(this->ssi());
            ss << ", ";
            ss << "us=" << static_cast<unsigned>(this->us());
            ss << ", ";
            ss << "usi=" << static_cast<unsigned>(this->usi());
            ss << ", ";
            ss << "l=" << this->l();
            ss << ", ";
            ss << "li=" << this->li();
            ss << ", ";
            ss << "sl=" << this->sl();
            ss << ", ";
            ss << "sli=" << this->sli();
            ss << ", ";
            ss << "ul=" << this->ul();
            ss << ", ";
            ss << "uli=" << this->uli();
            ss << ", ";
            ss << "ll=" << this->ll();
            ss << ", ";
            ss << "lli=" << this->lli();
            ss << ", ";
            ss << "sll=" << this->sll();
            ss << ", ";
            ss << "slli=" << this->slli();
            ss << ", ";
            ss << "ull=" << this->ull();
            ss << ", ";
            ss << "ulli=" << this->ulli();
            ss << ", ";
            ss << "f=" << this->f();
            ss << ", ";
            ss << "ft=" << this->ft();
            ss << ", ";
            ss << "d=" << this->d();
            ss << ", ";
            ss << "dt=" << this->dt();
            ss << ", ";
            if (0 == strncmp("", this->str2(), 1)) {
                ss << "str2=" << "";
            } else {
                ss << "str2=" << this->str2();
            }
            ss << ", ";
            ss << "b2=" << (this->b2() ? "true" : "false");
            ss << ", ";
            if (this->c2() == 0) {
                ss << "c2=" << "";
            } else {
                ss << "c2=" << this->c2();
            }
            ss << ", ";
            if (this->sc2() == 0) {
                ss << "sc2=" << "";
            } else {
                ss << "sc2=" << this->sc2();
            }
            ss << ", ";
            if (this->uc2() == 0) {
                ss << "uc2=" << "";
            } else {
                ss << "uc2=" << this->uc2();
            }
            ss << ", ";
            ss << "i2=" << static_cast<signed>(this->i2());
            ss << ", ";
            ss << "si2=" << static_cast<signed>(this->si2());
            ss << ", ";
            ss << "sii2=" << static_cast<signed>(this->sii2());
            ss << ", ";
            ss << "u2=" << static_cast<unsigned>(this->u2());
            ss << ", ";
            ss << "ui2=" << static_cast<unsigned>(this->ui2());
            ss << ", ";
            ss << "u82=" << static_cast<unsigned>(this->u82());
            ss << ", ";
            ss << "u162=" << static_cast<unsigned>(this->u162());
            ss << ", ";
            ss << "u322=" << static_cast<unsigned>(this->u322());
            ss << ", ";
            ss << "u642=" << this->u642();
            ss << ", ";
            ss << "i82=" << static_cast<signed>(this->i82());
            ss << ", ";
            ss << "i162=" << static_cast<signed>(this->i162());
            ss << ", ";
            ss << "i322=" << static_cast<signed>(this->i322());
            ss << ", ";
            ss << "i642=" << this->i642();
            ss << ", ";
            ss << "s2=" << static_cast<signed>(this->s2());
            ss << ", ";
            ss << "si_22=" << static_cast<signed>(this->si_22());
            ss << ", ";
            ss << "ss2=" << static_cast<signed>(this->ss2());
            ss << ", ";
            ss << "ssi2=" << static_cast<signed>(this->ssi2());
            ss << ", ";
            ss << "us2=" << static_cast<unsigned>(this->us2());
            ss << ", ";
            ss << "usi2=" << static_cast<unsigned>(this->usi2());
            ss << ", ";
            ss << "l2=" << this->l2();
            ss << ", ";
            ss << "li2=" << this->li2();
            ss << ", ";
            ss << "sl2=" << this->sl2();
            ss << ", ";
            ss << "sli2=" << this->sli2();
            ss << ", ";
            ss << "ul2=" << this->ul2();
            ss << ", ";
            ss << "uli2=" << this->uli2();
            ss << ", ";
            ss << "ll2=" << this->ll2();
            ss << ", ";
            ss << "lli2=" << this->lli2();
            ss << ", ";
            ss << "sll2=" << this->sll2();
            ss << ", ";
            ss << "slli2=" << this->slli2();
            ss << ", ";
            ss << "ull2=" << this->ull2();
            ss << ", ";
            ss << "ulli2=" << this->ulli2();
            ss << ", ";
            ss << "f2=" << this->f2();
            ss << ", ";
            ss << "ft2=" << this->ft2();
            ss << ", ";
            ss << "d2=" << this->d2();
            ss << ", ";
            ss << "dt2=" << this->dt2();
            ss << ", ";
            bool array16_first = true;
            ss << "array16={";
            for (int i = 0; i < DEMO_ARRAY16_ARRAY_SIZE; i++) {
                ss << (array16_first ? "" : ", ") << static_cast<signed>(this->array16(i));
                array16_first = false;
            }
            ss << "}";
            ss << ", ";
            bool bools_first = true;
            ss << "bools={";
            for (int i = 0; i < DEMO_BOOLS_ARRAY_SIZE; i++) {
                ss << (bools_first ? "" : ", ") << (this->bools(i) ? "true" : "false");
                bools_first = false;
            }
            ss << "}";
            ss << ", ";
            ss << "myBit=" << this->myBit();
            ss << ", ";
            ss << "myBit2=" << this->myBit2();
            ss << ", ";
            ss << "sub1=" << "{" << Sub(this->sub1()).description() << "}";
            ss << ", ";
            ss << "sub2=" << "{" << Sub(this->sub2()).description() << "}";
            ss << ", ";
            bool subs_first = true;
            ss << "subs={";
            for (int i = 0; i < DEMO_SUBS_ARRAY_SIZE; i++) {
                ss << (subs_first ? "" : ", ") << "{" << Sub(this->subs(i)).description() << "}";
                subs_first = false;
            }
            ss << "}";
            ss << ", ";
            ss << "cameraResolution=" << static_cast<signed>(this->cameraResolution());
            ss << ", ";
            ss << "cameraResolution2=" << static_cast<signed>(this->cameraResolution2());
            return ss.str();
#endif /// USE_WB_DEMO_C_CONVERSION
        }

        std::string to_string() {
#ifdef USE_WB_DEMO_C_CONVERSION
            char buffer[DEMO_TO_STRING_BUFFER_SIZE];
            wb_demo_to_string(this, buffer, sizeof(buffer));
            std::string toString = buffer;
            return toString;
#else
            std::ostringstream ss;
            if (0 == strncmp("", this->str(), 1)) {
                ss << "";
            } else {
                ss << this->str();
            }
            ss << ", ";
            ss << (this->b() ? "true" : "false");
            ss << ", ";
            if (this->c() == 0) {
                ss << "";
            } else {
                ss << this->c();
            }
            ss << ", ";
            if (this->sc() == 0) {
                ss << "";
            } else {
                ss << this->sc();
            }
            ss << ", ";
            if (this->uc() == 0) {
                ss << "";
            } else {
                ss << this->uc();
            }
            ss << ", ";
            ss << static_cast<signed>(this->i());
            ss << ", ";
            ss << static_cast<signed>(this->si());
            ss << ", ";
            ss << static_cast<signed>(this->sii());
            ss << ", ";
            ss << static_cast<unsigned>(this->u());
            ss << ", ";
            ss << static_cast<unsigned>(this->ui());
            ss << ", ";
            ss << static_cast<unsigned>(this->u8());
            ss << ", ";
            ss << static_cast<unsigned>(this->u16());
            ss << ", ";
            ss << static_cast<unsigned>(this->u32());
            ss << ", ";
            ss << this->u64();
            ss << ", ";
            ss << static_cast<signed>(this->i8());
            ss << ", ";
            ss << static_cast<signed>(this->i16());
            ss << ", ";
            ss << static_cast<signed>(this->i32());
            ss << ", ";
            ss << this->i64();
            ss << ", ";
            ss << static_cast<signed>(this->s());
            ss << ", ";
            ss << static_cast<signed>(this->si_2());
            ss << ", ";
            ss << static_cast<signed>(this->ss());
            ss << ", ";
            ss << static_cast<signed>(this->ssi());
            ss << ", ";
            ss << static_cast<unsigned>(this->us());
            ss << ", ";
            ss << static_cast<unsigned>(this->usi());
            ss << ", ";
            ss << this->l();
            ss << ", ";
            ss << this->li();
            ss << ", ";
            ss << this->sl();
            ss << ", ";
            ss << this->sli();
            ss << ", ";
            ss << this->ul();
            ss << ", ";
            ss << this->uli();
            ss << ", ";
            ss << this->ll();
            ss << ", ";
            ss << this->lli();
            ss << ", ";
            ss << this->sll();
            ss << ", ";
            ss << this->slli();
            ss << ", ";
            ss << this->ull();
            ss << ", ";
            ss << this->ulli();
            ss << ", ";
            ss << this->f();
            ss << ", ";
            ss << this->ft();
            ss << ", ";
            ss << this->d();
            ss << ", ";
            ss << this->dt();
            ss << ", ";
            if (0 == strncmp("", this->str2(), 1)) {
                ss << "";
            } else {
                ss << this->str2();
            }
            ss << ", ";
            ss << (this->b2() ? "true" : "false");
            ss << ", ";
            if (this->c2() == 0) {
                ss << "";
            } else {
                ss << this->c2();
            }
            ss << ", ";
            if (this->sc2() == 0) {
                ss << "";
            } else {
                ss << this->sc2();
            }
            ss << ", ";
            if (this->uc2() == 0) {
                ss << "";
            } else {
                ss << this->uc2();
            }
            ss << ", ";
            ss << static_cast<signed>(this->i2());
            ss << ", ";
            ss << static_cast<signed>(this->si2());
            ss << ", ";
            ss << static_cast<signed>(this->sii2());
            ss << ", ";
            ss << static_cast<unsigned>(this->u2());
            ss << ", ";
            ss << static_cast<unsigned>(this->ui2());
            ss << ", ";
            ss << static_cast<unsigned>(this->u82());
            ss << ", ";
            ss << static_cast<unsigned>(this->u162());
            ss << ", ";
            ss << static_cast<unsigned>(this->u322());
            ss << ", ";
            ss << this->u642();
            ss << ", ";
            ss << static_cast<signed>(this->i82());
            ss << ", ";
            ss << static_cast<signed>(this->i162());
            ss << ", ";
            ss << static_cast<signed>(this->i322());
            ss << ", ";
            ss << this->i642();
            ss << ", ";
            ss << static_cast<signed>(this->s2());
            ss << ", ";
            ss << static_cast<signed>(this->si_22());
            ss << ", ";
            ss << static_cast<signed>(this->ss2());
            ss << ", ";
            ss << static_cast<signed>(this->ssi2());
            ss << ", ";
            ss << static_cast<unsigned>(this->us2());
            ss << ", ";
            ss << static_cast<unsigned>(this->usi2());
            ss << ", ";
            ss << this->l2();
            ss << ", ";
            ss << this->li2();
            ss << ", ";
            ss << this->sl2();
            ss << ", ";
            ss << this->sli2();
            ss << ", ";
            ss << this->ul2();
            ss << ", ";
            ss << this->uli2();
            ss << ", ";
            ss << this->ll2();
            ss << ", ";
            ss << this->lli2();
            ss << ", ";
            ss << this->sll2();
            ss << ", ";
            ss << this->slli2();
            ss << ", ";
            ss << this->ull2();
            ss << ", ";
            ss << this->ulli2();
            ss << ", ";
            ss << this->f2();
            ss << ", ";
            ss << this->ft2();
            ss << ", ";
            ss << this->d2();
            ss << ", ";
            ss << this->dt2();
            ss << ", ";
            bool array16_first = true;
            ss << "{";
            for (int i = 0; i < DEMO_ARRAY16_ARRAY_SIZE; i++) {
                ss << (array16_first ? "" : ", ") << static_cast<signed>(this->array16(i));
                array16_first = false;
            }
            ss << "}";
            ss << ", ";
            bool bools_first = true;
            ss << "{";
            for (int i = 0; i < DEMO_BOOLS_ARRAY_SIZE; i++) {
                ss << (bools_first ? "" : ", ") << (this->bools(i) ? "true" : "false");
                bools_first = false;
            }
            ss << "}";
            ss << ", ";
            ss << this->myBit();
            ss << ", ";
            ss << this->myBit2();
            ss << ", ";
            ss << "{" << Sub(this->sub1()).to_string() << "}";
            ss << ", ";
            ss << "{" << Sub(this->sub2()).to_string() << "}";
            ss << ", ";
            bool subs_first = true;
            ss << "{";
            for (int i = 0; i < DEMO_SUBS_ARRAY_SIZE; i++) {
                ss << (subs_first ? "" : ", ") << "{" << Sub(this->subs(i)).to_string() << "}";
                subs_first = false;
            }
            ss << "}";
            ss << ", ";
            ss << static_cast<signed>(this->cameraResolution());
            ss << ", ";
            ss << static_cast<signed>(this->cameraResolution2());
            return ss.str();
#endif /// USE_WB_DEMO_C_CONVERSION
        }

#ifdef USE_WB_DEMO_C_CONVERSION
        void from_string(const std::string &t_str) {
            wb_demo_from_string(this, t_str.c_str());
#else
        void from_string(const std::string &t_str) {
            char * str_cstr = const_cast<char *>(t_str.c_str());
            size_t temp_length = strlen(str_cstr);
            int length = (temp_length <= INT_MAX) ? static_cast<int>(static_cast<ssize_t>(temp_length)) : -1;
            if (length < 1 || length > DEMO_DESC_BUFFER_SIZE) {
                return;
            }
            char var_str_buffer[DEMO_DESC_BUFFER_SIZE + 1];
            char* var_str = &var_str_buffer[0];
            char key_buffer[18];
            char* key = &key_buffer[0];
            int bracecount = 0;
            int lastBrace = -1;
            int startVar = 0;
            int index = 0;
            int startKey = 0;
            int endKey = -1;
            int varIndex = 0;
            if (index == 0 && str_cstr[0] == '{') {
                index = 1;
            }
            startVar = index;
            startKey = startVar;
            do {
                for (int i = index; i < length; i++) {
                    index = i + 1;
                    if (bracecount == 0 && str_cstr[i] == '=') {
                        endKey = i - 1;
                        startVar = index;
                        continue;
                    }
                    if (bracecount == 0 && isspace(str_cstr[i])) {
                        startVar = index;
                        if (endKey == -1) {
                            startKey = index;
                        }
                        continue;
                    }
                    if (bracecount == 0 && str_cstr[i] == ',') {
                        index = i - 1;
                        break;
                    }
                    if (str_cstr[i] == '{') {
                        bracecount++;
                        if (bracecount == 1) {
                            lastBrace = i;
                        }
                        continue;
                    }
                    if (str_cstr[i] == '}') {
                        bracecount--;
                        if (bracecount < 0) {
                            index = i - 1;
                            break;
                        }
                    }
                    if (i == length - 1) {
                        index = i;
                    }
                }
                if (endKey >= startKey && endKey - startKey < length) {
                    strncpy(key, str_cstr + startKey, static_cast<size_t>((endKey - startKey) + 1));
                    key[(endKey - startKey) + 1] = 0;
                } else {
                    key[0] = 0;
                }
                strncpy(var_str, str_cstr + startVar, static_cast<size_t>((index - startVar) + 1));
                var_str[(index - startVar) + 1] = 0;
                bracecount = 0;
                index += 2;
                startVar = index;
                startKey = startVar;
                endKey = -1;
                if (strlen(key) > 0) {
                    if (0 == strcmp("str", key)) {
                        varIndex = 0;
                    } else if (0 == strcmp("b", key)) {
                        varIndex = 1;
                    } else if (0 == strcmp("c", key)) {
                        varIndex = 2;
                    } else if (0 == strcmp("sc", key)) {
                        varIndex = 3;
                    } else if (0 == strcmp("uc", key)) {
                        varIndex = 4;
                    } else if (0 == strcmp("i", key)) {
                        varIndex = 5;
                    } else if (0 == strcmp("si", key)) {
                        varIndex = 6;
                    } else if (0 == strcmp("sii", key)) {
                        varIndex = 7;
                    } else if (0 == strcmp("u", key)) {
                        varIndex = 8;
                    } else if (0 == strcmp("ui", key)) {
                        varIndex = 9;
                    } else if (0 == strcmp("u8", key)) {
                        varIndex = 10;
                    } else if (0 == strcmp("u16", key)) {
                        varIndex = 11;
                    } else if (0 == strcmp("u32", key)) {
                        varIndex = 12;
                    } else if (0 == strcmp("u64", key)) {
                        varIndex = 13;
                    } else if (0 == strcmp("i8", key)) {
                        varIndex = 14;
                    } else if (0 == strcmp("i16", key)) {
                        varIndex = 15;
                    } else if (0 == strcmp("i32", key)) {
                        varIndex = 16;
                    } else if (0 == strcmp("i64", key)) {
                        varIndex = 17;
                    } else if (0 == strcmp("s", key)) {
                        varIndex = 18;
                    } else if (0 == strcmp("si_2", key)) {
                        varIndex = 19;
                    } else if (0 == strcmp("ss", key)) {
                        varIndex = 20;
                    } else if (0 == strcmp("ssi", key)) {
                        varIndex = 21;
                    } else if (0 == strcmp("us", key)) {
                        varIndex = 22;
                    } else if (0 == strcmp("usi", key)) {
                        varIndex = 23;
                    } else if (0 == strcmp("l", key)) {
                        varIndex = 24;
                    } else if (0 == strcmp("li", key)) {
                        varIndex = 25;
                    } else if (0 == strcmp("sl", key)) {
                        varIndex = 26;
                    } else if (0 == strcmp("sli", key)) {
                        varIndex = 27;
                    } else if (0 == strcmp("ul", key)) {
                        varIndex = 28;
                    } else if (0 == strcmp("uli", key)) {
                        varIndex = 29;
                    } else if (0 == strcmp("ll", key)) {
                        varIndex = 30;
                    } else if (0 == strcmp("lli", key)) {
                        varIndex = 31;
                    } else if (0 == strcmp("sll", key)) {
                        varIndex = 32;
                    } else if (0 == strcmp("slli", key)) {
                        varIndex = 33;
                    } else if (0 == strcmp("ull", key)) {
                        varIndex = 34;
                    } else if (0 == strcmp("ulli", key)) {
                        varIndex = 35;
                    } else if (0 == strcmp("f", key)) {
                        varIndex = 36;
                    } else if (0 == strcmp("ft", key)) {
                        varIndex = 37;
                    } else if (0 == strcmp("d", key)) {
                        varIndex = 38;
                    } else if (0 == strcmp("dt", key)) {
                        varIndex = 39;
                    } else if (0 == strcmp("str2", key)) {
                        varIndex = 40;
                    } else if (0 == strcmp("b2", key)) {
                        varIndex = 41;
                    } else if (0 == strcmp("c2", key)) {
                        varIndex = 42;
                    } else if (0 == strcmp("sc2", key)) {
                        varIndex = 43;
                    } else if (0 == strcmp("uc2", key)) {
                        varIndex = 44;
                    } else if (0 == strcmp("i2", key)) {
                        varIndex = 45;
                    } else if (0 == strcmp("si2", key)) {
                        varIndex = 46;
                    } else if (0 == strcmp("sii2", key)) {
                        varIndex = 47;
                    } else if (0 == strcmp("u2", key)) {
                        varIndex = 48;
                    } else if (0 == strcmp("ui2", key)) {
                        varIndex = 49;
                    } else if (0 == strcmp("u82", key)) {
                        varIndex = 50;
                    } else if (0 == strcmp("u162", key)) {
                        varIndex = 51;
                    } else if (0 == strcmp("u322", key)) {
                        varIndex = 52;
                    } else if (0 == strcmp("u642", key)) {
                        varIndex = 53;
                    } else if (0 == strcmp("i82", key)) {
                        varIndex = 54;
                    } else if (0 == strcmp("i162", key)) {
                        varIndex = 55;
                    } else if (0 == strcmp("i322", key)) {
                        varIndex = 56;
                    } else if (0 == strcmp("i642", key)) {
                        varIndex = 57;
                    } else if (0 == strcmp("s2", key)) {
                        varIndex = 58;
                    } else if (0 == strcmp("si_22", key)) {
                        varIndex = 59;
                    } else if (0 == strcmp("ss2", key)) {
                        varIndex = 60;
                    } else if (0 == strcmp("ssi2", key)) {
                        varIndex = 61;
                    } else if (0 == strcmp("us2", key)) {
                        varIndex = 62;
                    } else if (0 == strcmp("usi2", key)) {
                        varIndex = 63;
                    } else if (0 == strcmp("l2", key)) {
                        varIndex = 64;
                    } else if (0 == strcmp("li2", key)) {
                        varIndex = 65;
                    } else if (0 == strcmp("sl2", key)) {
                        varIndex = 66;
                    } else if (0 == strcmp("sli2", key)) {
                        varIndex = 67;
                    } else if (0 == strcmp("ul2", key)) {
                        varIndex = 68;
                    } else if (0 == strcmp("uli2", key)) {
                        varIndex = 69;
                    } else if (0 == strcmp("ll2", key)) {
                        varIndex = 70;
                    } else if (0 == strcmp("lli2", key)) {
                        varIndex = 71;
                    } else if (0 == strcmp("sll2", key)) {
                        varIndex = 72;
                    } else if (0 == strcmp("slli2", key)) {
                        varIndex = 73;
                    } else if (0 == strcmp("ull2", key)) {
                        varIndex = 74;
                    } else if (0 == strcmp("ulli2", key)) {
                        varIndex = 75;
                    } else if (0 == strcmp("f2", key)) {
                        varIndex = 76;
                    } else if (0 == strcmp("ft2", key)) {
                        varIndex = 77;
                    } else if (0 == strcmp("d2", key)) {
                        varIndex = 78;
                    } else if (0 == strcmp("dt2", key)) {
                        varIndex = 79;
                    } else if (0 == strcmp("array16", key)) {
                        varIndex = 80;
                    } else if (0 == strcmp("bools", key)) {
                        varIndex = 81;
                    } else if (0 == strcmp("myBit", key)) {
                        varIndex = 82;
                    } else if (0 == strcmp("myBit2", key)) {
                        varIndex = 83;
                    } else if (0 == strcmp("sub1", key)) {
                        varIndex = 84;
                    } else if (0 == strcmp("sub2", key)) {
                        varIndex = 85;
                    } else if (0 == strcmp("subs", key)) {
                        varIndex = 86;
                    } else if (0 == strcmp("cameraResolution", key)) {
                        varIndex = 87;
                    } else if (0 == strcmp("cameraResolution2", key)) {
                        varIndex = 88;
                    } else {
                        varIndex = -1;
                    }
                }
                switch (varIndex) {
                    case -1: { break; }
                    case 0:
                    {
                        strncpy(wb_demo::str, var_str, 6);
                        break;
                    }
                    case 1:
                    {
                        this->set_b(strcmp(var_str, "true") == 0 || strcmp(var_str, "1") == 0);
                        break;
                    }
                    case 2:
                    {
                        char c_temp;
                        this->set_c((*strncpy(&c_temp, var_str, 1)));
                        break;
                    }
                    case 3:
                    {
                        char sc_temp;
                        this->set_sc(static_cast<signed char>((*strncpy(&sc_temp, var_str, 1))));
                        break;
                    }
                    case 4:
                    {
                        char uc_temp;
                        this->set_uc(static_cast<unsigned char>((*strncpy(&uc_temp, var_str, 1))));
                        break;
                    }
                    case 5:
                    {
                        this->set_i(static_cast<int>(atoi(var_str)));
                        break;
                    }
                    case 6:
                    {
                        this->set_si(static_cast<signed>(atoi(var_str)));
                        break;
                    }
                    case 7:
                    {
                        this->set_sii(static_cast<signed int>(atoi(var_str)));
                        break;
                    }
                    case 8:
                    {
                        this->set_u(static_cast<unsigned>(atoi(var_str)));
                        break;
                    }
                    case 9:
                    {
                        this->set_ui(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 10:
                    {
                        this->set_u8(static_cast<uint8_t>(atoi(var_str)));
                        break;
                    }
                    case 11:
                    {
                        this->set_u16(static_cast<uint16_t>(atoi(var_str)));
                        break;
                    }
                    case 12:
                    {
                        this->set_u32(static_cast<uint32_t>(atoi(var_str)));
                        break;
                    }
                    case 13:
                    {
#ifdef __APPLE__
                        this->set_u64(static_cast<uint64_t>(atoll(var_str)));
#else
                        this->set_u64(static_cast<uint64_t>(atol(var_str)));
#endif
                        break;
                    }
                    case 14:
                    {
                        this->set_i8(static_cast<int8_t>(atoi(var_str)));
                        break;
                    }
                    case 15:
                    {
                        this->set_i16(static_cast<int16_t>(atoi(var_str)));
                        break;
                    }
                    case 16:
                    {
                        this->set_i32(static_cast<int32_t>(atoi(var_str)));
                        break;
                    }
                    case 17:
                    {
#ifdef __APPLE__
                        this->set_i64(static_cast<int64_t>(atoll(var_str)));
#else
                        this->set_i64(static_cast<int64_t>(atol(var_str)));
#endif
                        break;
                    }
                    case 18:
                    {
                        this->set_s(static_cast<short>(atoi(var_str)));
                        break;
                    }
                    case 19:
                    {
                        this->set_si_2(static_cast<short int>(atoi(var_str)));
                        break;
                    }
                    case 20:
                    {
                        this->set_ss(static_cast<signed short>(atoi(var_str)));
                        break;
                    }
                    case 21:
                    {
                        this->set_ssi(static_cast<signed short int>(atoi(var_str)));
                        break;
                    }
                    case 22:
                    {
                        this->set_us(static_cast<unsigned short>(atoi(var_str)));
                        break;
                    }
                    case 23:
                    {
                        this->set_usi(static_cast<unsigned short int>(atoi(var_str)));
                        break;
                    }
                    case 24:
                    {
                        this->set_l(static_cast<long>(atol(var_str)));
                        break;
                    }
                    case 25:
                    {
                        this->set_li(static_cast<long int>(atol(var_str)));
                        break;
                    }
                    case 26:
                    {
                        this->set_sl(static_cast<signed long>(atol(var_str)));
                        break;
                    }
                    case 27:
                    {
                        this->set_sli(static_cast<signed long int>(atol(var_str)));
                        break;
                    }
                    case 28:
                    {
                        this->set_ul(static_cast<unsigned long>(atol(var_str)));
                        break;
                    }
                    case 29:
                    {
                        this->set_uli(static_cast<unsigned long int>(atol(var_str)));
                        break;
                    }
                    case 30:
                    {
                        this->set_ll(static_cast<long long>(atoll(var_str)));
                        break;
                    }
                    case 31:
                    {
                        this->set_lli(static_cast<long long int>(atoll(var_str)));
                        break;
                    }
                    case 32:
                    {
                        this->set_sll(static_cast<signed long long>(atoll(var_str)));
                        break;
                    }
                    case 33:
                    {
                        this->set_slli(static_cast<signed long long int>(atoll(var_str)));
                        break;
                    }
                    case 34:
                    {
                        this->set_ull(static_cast<unsigned long long>(atoll(var_str)));
                        break;
                    }
                    case 35:
                    {
                        this->set_ulli(static_cast<unsigned long long int>(atoll(var_str)));
                        break;
                    }
                    case 36:
                    {
                        this->set_f(static_cast<float>(atof(var_str)));
                        break;
                    }
                    case 37:
                    {
                        this->set_ft(static_cast<float_t>(atof(var_str)));
                        break;
                    }
                    case 38:
                    {
                        this->set_d(static_cast<double>(atof(var_str)));
                        break;
                    }
                    case 39:
                    {
                        this->set_dt(static_cast<double_t>(atof(var_str)));
                        break;
                    }
                    case 40:
                    {
                        strncpy(wb_demo::str2, var_str, 6);
                        break;
                    }
                    case 41:
                    {
                        this->set_b2(strcmp(var_str, "true") == 0 || strcmp(var_str, "1") == 0);
                        break;
                    }
                    case 42:
                    {
                        char c2_temp;
                        this->set_c2((*strncpy(&c2_temp, var_str, 1)));
                        break;
                    }
                    case 43:
                    {
                        char sc2_temp;
                        this->set_sc2(static_cast<signed char>((*strncpy(&sc2_temp, var_str, 1))));
                        break;
                    }
                    case 44:
                    {
                        char uc2_temp;
                        this->set_uc2(static_cast<unsigned char>((*strncpy(&uc2_temp, var_str, 1))));
                        break;
                    }
                    case 45:
                    {
                        this->set_i2(static_cast<int>(atoi(var_str)));
                        break;
                    }
                    case 46:
                    {
                        this->set_si2(static_cast<signed>(atoi(var_str)));
                        break;
                    }
                    case 47:
                    {
                        this->set_sii2(static_cast<signed int>(atoi(var_str)));
                        break;
                    }
                    case 48:
                    {
                        this->set_u2(static_cast<unsigned>(atoi(var_str)));
                        break;
                    }
                    case 49:
                    {
                        this->set_ui2(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 50:
                    {
                        this->set_u82(static_cast<uint8_t>(atoi(var_str)));
                        break;
                    }
                    case 51:
                    {
                        this->set_u162(static_cast<uint16_t>(atoi(var_str)));
                        break;
                    }
                    case 52:
                    {
                        this->set_u322(static_cast<uint32_t>(atoi(var_str)));
                        break;
                    }
                    case 53:
                    {
#ifdef __APPLE__
                        this->set_u642(static_cast<uint64_t>(atoll(var_str)));
#else
                        this->set_u642(static_cast<uint64_t>(atol(var_str)));
#endif
                        break;
                    }
                    case 54:
                    {
                        this->set_i82(static_cast<int8_t>(atoi(var_str)));
                        break;
                    }
                    case 55:
                    {
                        this->set_i162(static_cast<int16_t>(atoi(var_str)));
                        break;
                    }
                    case 56:
                    {
                        this->set_i322(static_cast<int32_t>(atoi(var_str)));
                        break;
                    }
                    case 57:
                    {
#ifdef __APPLE__
                        this->set_i642(static_cast<int64_t>(atoll(var_str)));
#else
                        this->set_i642(static_cast<int64_t>(atol(var_str)));
#endif
                        break;
                    }
                    case 58:
                    {
                        this->set_s2(static_cast<short>(atoi(var_str)));
                        break;
                    }
                    case 59:
                    {
                        this->set_si_22(static_cast<short int>(atoi(var_str)));
                        break;
                    }
                    case 60:
                    {
                        this->set_ss2(static_cast<signed short>(atoi(var_str)));
                        break;
                    }
                    case 61:
                    {
                        this->set_ssi2(static_cast<signed short int>(atoi(var_str)));
                        break;
                    }
                    case 62:
                    {
                        this->set_us2(static_cast<unsigned short>(atoi(var_str)));
                        break;
                    }
                    case 63:
                    {
                        this->set_usi2(static_cast<unsigned short int>(atoi(var_str)));
                        break;
                    }
                    case 64:
                    {
                        this->set_l2(static_cast<long>(atol(var_str)));
                        break;
                    }
                    case 65:
                    {
                        this->set_li2(static_cast<long int>(atol(var_str)));
                        break;
                    }
                    case 66:
                    {
                        this->set_sl2(static_cast<signed long>(atol(var_str)));
                        break;
                    }
                    case 67:
                    {
                        this->set_sli2(static_cast<signed long int>(atol(var_str)));
                        break;
                    }
                    case 68:
                    {
                        this->set_ul2(static_cast<unsigned long>(atol(var_str)));
                        break;
                    }
                    case 69:
                    {
                        this->set_uli2(static_cast<unsigned long int>(atol(var_str)));
                        break;
                    }
                    case 70:
                    {
                        this->set_ll2(static_cast<long long>(atoll(var_str)));
                        break;
                    }
                    case 71:
                    {
                        this->set_lli2(static_cast<long long int>(atoll(var_str)));
                        break;
                    }
                    case 72:
                    {
                        this->set_sll2(static_cast<signed long long>(atoll(var_str)));
                        break;
                    }
                    case 73:
                    {
                        this->set_slli2(static_cast<signed long long int>(atoll(var_str)));
                        break;
                    }
                    case 74:
                    {
                        this->set_ull2(static_cast<unsigned long long>(atoll(var_str)));
                        break;
                    }
                    case 75:
                    {
                        this->set_ulli2(static_cast<unsigned long long int>(atoll(var_str)));
                        break;
                    }
                    case 76:
                    {
                        this->set_f2(static_cast<float>(atof(var_str)));
                        break;
                    }
                    case 77:
                    {
                        this->set_ft2(static_cast<float_t>(atof(var_str)));
                        break;
                    }
                    case 78:
                    {
                        this->set_d2(static_cast<double>(atof(var_str)));
                        break;
                    }
                    case 79:
                    {
                        this->set_dt2(static_cast<double_t>(atof(var_str)));
                        break;
                    }
                    case 80:
                    {
                        int restartIndex = index;
                        index = lastBrace + 1;
                        startVar = index;
                        startKey = startVar;
                        endKey = -1;
                        bracecount = 0;
                        for (int array16_0_index = 0; array16_0_index < DEMO_ARRAY16_ARRAY_SIZE; array16_0_index++) {
                            for (int i = index; i < length; i++) {
                                index = i + 1;
                                if (bracecount == 0 && str_cstr[i] == '=') {
                                    endKey = i - 1;
                                    startVar = index;
                                    continue;
                                }
                                if (bracecount == 0 && isspace(str_cstr[i])) {
                                    startVar = index;
                                    if (endKey == -1) {
                                        startKey = index;
                                    }
                                    continue;
                                }
                                if (bracecount == 0 && str_cstr[i] == ',') {
                                    index = i - 1;
                                    break;
                                }
                                if (str_cstr[i] == '{') {
                                    bracecount++;
                                    continue;
                                }
                                if (str_cstr[i] == '}') {
                                    bracecount--;
                                    if (bracecount < 0) {
                                        index = i - 1;
                                        break;
                                    }
                                }
                                if (i == length - 1) {
                                    index = i;
                                }
                            }
                            if (endKey >= startKey && endKey - startKey < length) {
                                strncpy(key, str_cstr + startKey, static_cast<size_t>((endKey - startKey) + 1));
                                key[(endKey - startKey) + 1] = 0;
                            } else {
                                key[0] = 0;
                            }
                            strncpy(var_str, str_cstr + startVar, static_cast<size_t>((index - startVar) + 1));
                            var_str[(index - startVar) + 1] = 0;
                            bracecount = 0;
                            index += 2;
                            startVar = index;
                            startKey = startVar;
                            endKey = -1;
                            this->set_array16(static_cast<int16_t>(atoi(var_str)), array16_0_index);
                        }
                        index = restartIndex;
                        break;
                    }
                    case 81:
                    {
                        int restartIndex = index;
                        index = lastBrace + 1;
                        startVar = index;
                        startKey = startVar;
                        endKey = -1;
                        bracecount = 0;
                        for (int bools_0_index = 0; bools_0_index < DEMO_BOOLS_ARRAY_SIZE; bools_0_index++) {
                            for (int i = index; i < length; i++) {
                                index = i + 1;
                                if (bracecount == 0 && str_cstr[i] == '=') {
                                    endKey = i - 1;
                                    startVar = index;
                                    continue;
                                }
                                if (bracecount == 0 && isspace(str_cstr[i])) {
                                    startVar = index;
                                    if (endKey == -1) {
                                        startKey = index;
                                    }
                                    continue;
                                }
                                if (bracecount == 0 && str_cstr[i] == ',') {
                                    index = i - 1;
                                    break;
                                }
                                if (str_cstr[i] == '{') {
                                    bracecount++;
                                    continue;
                                }
                                if (str_cstr[i] == '}') {
                                    bracecount--;
                                    if (bracecount < 0) {
                                        index = i - 1;
                                        break;
                                    }
                                }
                                if (i == length - 1) {
                                    index = i;
                                }
                            }
                            if (endKey >= startKey && endKey - startKey < length) {
                                strncpy(key, str_cstr + startKey, static_cast<size_t>((endKey - startKey) + 1));
                                key[(endKey - startKey) + 1] = 0;
                            } else {
                                key[0] = 0;
                            }
                            strncpy(var_str, str_cstr + startVar, static_cast<size_t>((index - startVar) + 1));
                            var_str[(index - startVar) + 1] = 0;
                            bracecount = 0;
                            index += 2;
                            startVar = index;
                            startKey = startVar;
                            endKey = -1;
                            this->set_bools(strcmp(var_str, "true") == 0 || strcmp(var_str, "1") == 0, bools_0_index);
                        }
                        index = restartIndex;
                        break;
                    }
                    case 82:
                    {
                        this->set_myBit(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 83:
                    {
                        this->set_myBit2(static_cast<unsigned int>(atoi(var_str)));
                        break;
                    }
                    case 84:
                    {
                        Sub sub1_temp = Sub();
                        sub1_temp.from_string(var_str);
                        this->set_sub1(sub1_temp);
                        break;
                    }
                    case 85:
                    {
                        Sub sub2_temp = Sub();
                        sub2_temp.from_string(var_str);
                        this->set_sub2(sub2_temp);
                        break;
                    }
                    case 86:
                    {
                        int restartIndex = index;
                        index = lastBrace + 1;
                        startVar = index;
                        startKey = startVar;
                        endKey = -1;
                        bracecount = 0;
                        for (int subs_0_index = 0; subs_0_index < DEMO_SUBS_ARRAY_SIZE; subs_0_index++) {
                            for (int i = index; i < length; i++) {
                                index = i + 1;
                                if (bracecount == 0 && str_cstr[i] == '=') {
                                    endKey = i - 1;
                                    startVar = index;
                                    continue;
                                }
                                if (bracecount == 0 && isspace(str_cstr[i])) {
                                    startVar = index;
                                    if (endKey == -1) {
                                        startKey = index;
                                    }
                                    continue;
                                }
                                if (bracecount == 0 && str_cstr[i] == ',') {
                                    index = i - 1;
                                    break;
                                }
                                if (str_cstr[i] == '{') {
                                    bracecount++;
                                    continue;
                                }
                                if (str_cstr[i] == '}') {
                                    bracecount--;
                                    if (bracecount < 0) {
                                        index = i - 1;
                                        break;
                                    }
                                }
                                if (i == length - 1) {
                                    index = i;
                                }
                            }
                            if (endKey >= startKey && endKey - startKey < length) {
                                strncpy(key, str_cstr + startKey, static_cast<size_t>((endKey - startKey) + 1));
                                key[(endKey - startKey) + 1] = 0;
                            } else {
                                key[0] = 0;
                            }
                            strncpy(var_str, str_cstr + startVar, static_cast<size_t>((index - startVar) + 1));
                            var_str[(index - startVar) + 1] = 0;
                            bracecount = 0;
                            index += 2;
                            startVar = index;
                            startKey = startVar;
                            endKey = -1;
                            Sub subs_0_temp = Sub();
                            subs_0_temp.from_string(var_str);
                            struct wb_sub subs_0 = subs_0_temp;
                            this->set_subs(subs_0, subs_0_index);
                        }
                        index = restartIndex;
                        break;
                    }
                    case 87:
                    {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast"
                        this->set_cameraResolution(static_cast<enum Resolutions>(atoi(var_str)));
#pragma clang diagnostic pop
                        break;
                    }
                    case 88:
                    {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbad-function-cast"
                        this->set_cameraResolution2(static_cast<enum Resolutions>(atoi(var_str)));
#pragma clang diagnostic pop
                        break;
                    }
                }
                if (varIndex >= 0) {
                    varIndex++;
                }
            } while(index < length);
#endif /// USE_WB_DEMO_C_CONVERSION
        }
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION
    };

} /// namespace guWhiteboard

#endif /// guWhiteboard_Demo_h
