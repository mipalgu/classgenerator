/*
 * file FieldBalls.hpp
 *
 * This file was generated by classgenerator from fieldBalls.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2021 Carl Lusty. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Carl Lusty.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#ifndef guWhiteboard_FieldBalls_h
#define guWhiteboard_FieldBalls_h

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
#include <cstdlib>
#include <string.h>
#include <sstream>
#endif

#include <gu_util.h>
#include "wb_field_balls.h"

#undef guWhiteboard_FieldBalls_DEFINED
#define guWhiteboard_FieldBalls_DEFINED

#undef FieldBalls_DEFINED
#define FieldBalls_DEFINED

namespace guWhiteboard {

    /**
     * Provides a C++ wrapper around `wb_field_balls`.
     */
    class FieldBalls: public wb_field_balls {

    private:

        /**
         * Set the members of the class.
         */
        void init(const struct wb_field_ball t_balls[2] = NULLPTR) {
            if (t_balls != NULLPTR) {
                std::memcpy(wb_field_balls::balls, t_balls, FIELDBALLS_BALLS_ARRAY_SIZE * sizeof (struct wb_field_ball));
            } else {
                struct wb_field_ball balls_temp[FIELDBALLS_BALLS_ARRAY_SIZE] = { wb_field_ball(), wb_field_ball() };
                std::memcpy(wb_field_balls::balls, balls_temp, FIELDBALLS_BALLS_ARRAY_SIZE * sizeof (struct wb_field_ball));
            }
        }

    public:

        /**
         * Create a new `FieldBalls`.
         */
        FieldBalls(const struct wb_field_ball t_balls[2] = NULLPTR) {
            this->init(t_balls);
        }

        /**
         * Copy Constructor.
         */
        FieldBalls(const FieldBalls &t_other): wb_field_balls() {
            this->init(t_other.balls());
        }

        /**
         * Copy Constructor.
         */
        FieldBalls(const struct wb_field_balls &t_other): wb_field_balls() {
            this->init(t_other.balls);
        }

        /**
         * Copy Assignment Operator.
         */
        FieldBalls &operator = (const FieldBalls &t_other) {
            this->init(t_other.balls());
            return *this;
        }

        /**
         * Copy Assignment Operator.
         */
        FieldBalls &operator = (const struct wb_field_balls &t_other) {
            this->init(t_other.balls);
            return *this;
        }

        bool operator ==(const FieldBalls &t_other) const
        {
            return true;
        }

        bool operator !=(const FieldBalls &t_other) const
        {
            return !(*this == t_other);
        }

        bool operator ==(const wb_field_balls &t_other) const
        {
            return *this == FieldBalls(t_other);
        }

        bool operator !=(const wb_field_balls &t_other) const
        {
            return !(*this == t_other);
        }

        const struct wb_field_ball * balls() const
        {
            return &(wb_field_balls::balls[0]);
        }

        size_t balls_size() const
        {
            return FIELDBALLS_BALLS_ARRAY_SIZE;
        }

        struct wb_field_ball & balls(int t_i)
        {
            return wb_field_balls::balls[t_i];
        }

        const struct wb_field_ball & balls(int t_i) const
        {
            return wb_field_balls::balls[t_i];
        }

        void set_balls(const struct wb_field_ball *t_newValue)
        {
            memcpy(wb_field_balls::balls, t_newValue, FIELDBALLS_BALLS_ARRAY_SIZE * (sizeof (struct wb_field_ball)));
        }

        void set_balls(const struct wb_field_ball &t_newValue, int t_i)
        {
            wb_field_balls::balls[t_i] = t_newValue;
        }

#ifdef WHITEBOARD_POSTER_STRING_CONVERSION
        /**
         * String Constructor.
         */
        FieldBalls(const std::string &t_str) {
            this->init();
            this->from_string(t_str);
        }

        std::string description() {
#ifdef USE_WB_FIELD_BALLS_C_CONVERSION
            char buffer[FIELDBALLS_DESC_BUFFER_SIZE];
            wb_field_balls_description(this, buffer, sizeof(buffer));
            std::string descr = buffer;
            return descr;
#else
            std::ostringstream ss;

            return ss.str();
#endif /// USE_WB_FIELD_BALLS_C_CONVERSION
        }

        std::string to_string() {
#ifdef USE_WB_FIELD_BALLS_C_CONVERSION
            char buffer[FIELDBALLS_TO_STRING_BUFFER_SIZE];
            wb_field_balls_to_string(this, buffer, sizeof(buffer));
            std::string toString = buffer;
            return toString;
#else
            std::ostringstream ss;

            return ss.str();
#endif /// USE_WB_FIELD_BALLS_C_CONVERSION
        }

#ifdef USE_WB_FIELD_BALLS_C_CONVERSION
        void from_string(const std::string &t_str) {
            wb_field_balls_from_string(this, t_str.c_str());
#else
        void from_string(const std::string &t_str) {
            char * str_cstr = const_cast<char *>(t_str.c_str());
            size_t temp_length = strlen(str_cstr);
            int length = (temp_length <= INT_MAX) ? static_cast<int>(static_cast<ssize_t>(temp_length)) : -1;
            if (length < 1 || length > FIELDBALLS_DESC_BUFFER_SIZE) {
                return;
            }
            char var_str_buffer[FIELDBALLS_DESC_BUFFER_SIZE + 1];
            char* var_str = &var_str_buffer[0];
            char key_buffer[6];
            char* key = &key_buffer[0];
            int bracecount = 0;
            int lastBrace = -1;
            int startVar = 0;
            int index = 0;
            int startKey = 0;
            int endKey = -1;
            int varIndex = 0;
            if (index == 0 && str_cstr[0] == '{') {
                index = 1;
            }
            startVar = index;
            startKey = startVar;
            do {
                for (int i = index; i < length; i++) {
                    index = i + 1;
                    if (bracecount == 0 && str_cstr[i] == '=') {
                        endKey = i - 1;
                        startVar = index;
                        continue;
                    }
                    if (bracecount == 0 && isspace(str_cstr[i])) {
                        startVar = index;
                        if (endKey == -1) {
                            startKey = index;
                        }
                        continue;
                    }
                    if (bracecount == 0 && str_cstr[i] == ',') {
                        index = i - 1;
                        break;
                    }
                    if (str_cstr[i] == '{') {
                        bracecount++;
                        if (bracecount == 1) {
                            lastBrace = i;
                        }
                        continue;
                    }
                    if (str_cstr[i] == '}') {
                        bracecount--;
                        if (bracecount < 0) {
                            index = i - 1;
                            break;
                        }
                    }
                    if (i == length - 1) {
                        index = i;
                    }
                }
                if (endKey >= startKey && endKey - startKey < length) {
                    strncpy(key, str_cstr + startKey, static_cast<size_t>((endKey - startKey) + 1));
                    key[(endKey - startKey) + 1] = 0;
                } else {
                    key[0] = 0;
                }
                strncpy(var_str, str_cstr + startVar, static_cast<size_t>((index - startVar) + 1));
                var_str[(index - startVar) + 1] = 0;
                bracecount = 0;
                index += 2;
                startVar = index;
                startKey = startVar;
                endKey = -1;
                if (strlen(key) > 0) {
                    if (0 == strcmp("balls", key)) {
                        varIndex = 0;
                    } else {
                        varIndex = -1;
                    }
                }
                switch (varIndex) {
                    case -1: { break; }

                }
                if (varIndex >= 0) {
                    varIndex++;
                }
            } while(index < length);
#endif /// USE_WB_FIELD_BALLS_C_CONVERSION
        }
#endif /// WHITEBOARD_POSTER_STRING_CONVERSION
    };

} /// namespace guWhiteboard

#endif /// guWhiteboard_FieldBalls_h
